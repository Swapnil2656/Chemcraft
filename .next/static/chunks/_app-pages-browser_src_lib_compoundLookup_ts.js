"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_compoundLookup_ts"],{

/***/ "(app-pages-browser)/./src/lib/compoundLookup.ts":
/*!***********************************!*\
  !*** ./src/lib/compoundLookup.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getElementWikipediaUrl: function() { return /* binding */ getElementWikipediaUrl; },\n/* harmony export */   lookupCompound: function() { return /* binding */ lookupCompound; }\n/* harmony export */ });\n// Cache for compounds\nconst compoundCache = new Map();\nlet compoundsDatabase = null;\nasync function lookupCompound(elements) {\n    // Normalize element names and create lookup keys\n    const elementNames = elements.map((el)=>el.name);\n    const sortedNames = [\n        ...elementNames\n    ].sort();\n    // Generate all possible permutations for lookup\n    const lookupKeys = new Set();\n    // Add basic combinations\n    lookupKeys.add(elementNames.join(\"+\"));\n    lookupKeys.add(sortedNames.join(\"+\"));\n    lookupKeys.add(elementNames.reverse().join(\"+\"));\n    // For 3+ elements, try different groupings\n    if (elementNames.length >= 3) {\n        const permutations = getPermutations(elementNames);\n        permutations.forEach((perm)=>lookupKeys.add(perm.join(\"+\")));\n    }\n    const lookupKeysArray = Array.from(lookupKeys);\n    // Looking up compound for elements\n    // Check cache first for any of the keys\n    for (const key of lookupKeysArray){\n        if (compoundCache.has(key)) {\n            // Found in cache\n            return compoundCache.get(key) || null;\n        }\n    }\n    // Load compounds database if not loaded\n    if (!compoundsDatabase) {\n        try {\n            const response = await fetch(\"/data/compounds.json\");\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            compoundsDatabase = await response.json();\n        // Loaded compounds database successfully\n        } catch (error) {\n            console.error(\"Failed to load compounds database:\", error);\n            compoundsDatabase = {};\n        }\n    }\n    // Check local database with all possible keys\n    if (compoundsDatabase) {\n        for (const key of lookupKeysArray){\n            const localCompound = compoundsDatabase[key];\n            if (localCompound) {\n                // Found in local database\n                compoundCache.set(sortedNames.join(\"+\"), localCompound);\n                return localCompound;\n            }\n        }\n    }\n    // Not found in local database, querying PubChem API\n    // Query PubChem API for comprehensive compound database\n    try {\n        const pubchemCompound = await queryPubChemByElements(elements);\n        if (pubchemCompound) {\n            // Found compound via PubChem\n            compoundCache.set(sortedNames.join(\"+\"), pubchemCompound);\n            return pubchemCompound;\n        }\n    } catch (error) {\n        console.error(\"PubChem query failed:\", error);\n    }\n    // Cache negative result to avoid repeated API calls\n    compoundCache.set(sortedNames.join(\"+\"), null);\n    return null;\n}\nasync function queryPubChemByElements(elements) {\n    try {\n        // Generate possible molecular formulas\n        const formulas = generatePossibleFormulas(elements);\n        // Try each formula with PubChem\n        for (const formula of formulas){\n            const compound = await queryPubChemByFormula(formula);\n            if (compound) {\n                return compound;\n            }\n        }\n        // Try name-based search as fallback\n        const nameQuery = elements.map((el)=>el.name.toLowerCase()).sort().join(\" \");\n        const nameCompound = await queryPubChemByName(nameQuery);\n        if (nameCompound) {\n            return nameCompound;\n        }\n        return null;\n    } catch (error) {\n        return null;\n    }\n}\nasync function queryPubChemByFormula(formula) {\n    try {\n        var _compound_id_id, _compound_id, _propsData_PropertyTable_Properties, _propsData_PropertyTable;\n        const searchUrl = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/formula/\".concat(formula, \"/JSON\");\n        const response = await fetch(searchUrl);\n        if (!response.ok) return null;\n        const data = await response.json();\n        const compounds = data.PC_Compounds;\n        if (!compounds || compounds.length === 0) return null;\n        // Get the first compound\n        const compound = compounds[0];\n        const cid = (_compound_id = compound.id) === null || _compound_id === void 0 ? void 0 : (_compound_id_id = _compound_id.id) === null || _compound_id_id === void 0 ? void 0 : _compound_id_id.cid;\n        if (!cid) return null;\n        // Get detailed properties\n        const propsUrl = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/\".concat(cid, \"/property/MolecularFormula,IUPACName,MolecularWeight,CanonicalSMILES/JSON\");\n        const propsResponse = await fetch(propsUrl);\n        if (!propsResponse.ok) return null;\n        const propsData = await propsResponse.json();\n        const props = (_propsData_PropertyTable = propsData.PropertyTable) === null || _propsData_PropertyTable === void 0 ? void 0 : (_propsData_PropertyTable_Properties = _propsData_PropertyTable.Properties) === null || _propsData_PropertyTable_Properties === void 0 ? void 0 : _propsData_PropertyTable_Properties[0];\n        if (!props) return null;\n        const name = props.IUPACName || props.MolecularFormula || \"Unknown compound\";\n        return {\n            elements: [],\n            formula: props.MolecularFormula || formula,\n            name: name.length > 50 ? props.MolecularFormula : name,\n            properties: {\n                state: \"Unknown\",\n                melting_point: \"Unknown\",\n                boiling_point: \"Unknown\",\n                density: \"Unknown\"\n            },\n            uses: [\n                \"Chemical compound\",\n                \"Research\",\n                \"Industrial applications\"\n            ],\n            links: {\n                wikipedia: \"https://en.wikipedia.org/wiki/\".concat(encodeURIComponent(name)),\n                pubchem: \"https://pubchem.ncbi.nlm.nih.gov/compound/\".concat(cid)\n            }\n        };\n    } catch (error) {\n        return null;\n    }\n}\nasync function queryPubChemByName(nameQuery) {\n    try {\n        var _compound_id_id, _compound_id, _propsData_PropertyTable_Properties, _propsData_PropertyTable;\n        const searchUrl = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/name/\".concat(encodeURIComponent(nameQuery), \"/JSON\");\n        const response = await fetch(searchUrl);\n        if (!response.ok) return null;\n        const data = await response.json();\n        const compounds = data.PC_Compounds;\n        if (!compounds || compounds.length === 0) return null;\n        const compound = compounds[0];\n        const cid = (_compound_id = compound.id) === null || _compound_id === void 0 ? void 0 : (_compound_id_id = _compound_id.id) === null || _compound_id_id === void 0 ? void 0 : _compound_id_id.cid;\n        if (!cid) return null;\n        const propsUrl = \"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/\".concat(cid, \"/property/MolecularFormula,IUPACName,MolecularWeight/JSON\");\n        const propsResponse = await fetch(propsUrl);\n        if (!propsResponse.ok) return null;\n        const propsData = await propsResponse.json();\n        const props = (_propsData_PropertyTable = propsData.PropertyTable) === null || _propsData_PropertyTable === void 0 ? void 0 : (_propsData_PropertyTable_Properties = _propsData_PropertyTable.Properties) === null || _propsData_PropertyTable_Properties === void 0 ? void 0 : _propsData_PropertyTable_Properties[0];\n        if (!props) return null;\n        const name = props.IUPACName || nameQuery;\n        return {\n            elements: [],\n            formula: props.MolecularFormula || \"Unknown\",\n            name: name.length > 50 ? props.MolecularFormula : name,\n            properties: {\n                state: \"Unknown\",\n                melting_point: \"Unknown\",\n                boiling_point: \"Unknown\",\n                density: \"Unknown\"\n            },\n            uses: [\n                \"Chemical compound\",\n                \"Research\",\n                \"Industrial applications\"\n            ],\n            links: {\n                wikipedia: \"https://en.wikipedia.org/wiki/\".concat(encodeURIComponent(name)),\n                pubchem: \"https://pubchem.ncbi.nlm.nih.gov/compound/\".concat(cid)\n            }\n        };\n    } catch (error) {\n        return null;\n    }\n}\nfunction generatePossibleFormulas(elements) {\n    const formulas = [];\n    const symbols = elements.map((el)=>el.symbol);\n    if (elements.length === 2) {\n        const [s1, s2] = symbols;\n        formulas.push(\"\".concat(s1).concat(s2), \"\".concat(s2).concat(s1), \"\".concat(s1, \"2\").concat(s2), \"\".concat(s2, \"2\").concat(s1), \"\".concat(s1).concat(s2, \"2\"), \"\".concat(s2).concat(s1, \"2\"), \"\".concat(s1, \"2\").concat(s2, \"3\"), \"\".concat(s2, \"2\").concat(s1, \"3\"), \"\".concat(s1, \"3\").concat(s2, \"2\"), \"\".concat(s2, \"3\").concat(s1, \"2\"), \"\".concat(s1, \"3\").concat(s2), \"\".concat(s2, \"3\").concat(s1), \"\".concat(s1).concat(s2, \"3\"), \"\".concat(s2).concat(s1, \"3\"), \"\".concat(s1, \"4\").concat(s2), \"\".concat(s2, \"4\").concat(s1));\n    } else if (elements.length === 3) {\n        const [s1, s2, s3] = symbols;\n        formulas.push(\"\".concat(s1).concat(s2).concat(s3), \"\".concat(s1).concat(s3).concat(s2), \"\".concat(s2).concat(s1).concat(s3), \"\".concat(s2).concat(s3).concat(s1), \"\".concat(s3).concat(s1).concat(s2), \"\".concat(s3).concat(s2).concat(s1), \"\".concat(s1, \"2\").concat(s2).concat(s3), \"\".concat(s1).concat(s2, \"2\").concat(s3), \"\".concat(s1).concat(s2).concat(s3, \"2\"), \"\".concat(s1).concat(s2).concat(s3, \"3\"), \"\".concat(s1).concat(s2, \"3\").concat(s3), \"\".concat(s1, \"3\").concat(s2).concat(s3));\n    } else if (elements.length >= 4) {\n        // For 4+ elements, try basic combinations\n        formulas.push(symbols.join(\"\"));\n        formulas.push(symbols.reverse().join(\"\"));\n    }\n    return Array.from(new Set(formulas));\n}\nfunction getPermutations(arr) {\n    if (arr.length <= 1) return [\n        arr\n    ];\n    const result = [];\n    for(let i = 0; i < arr.length; i++){\n        const rest = [\n            ...arr.slice(0, i),\n            ...arr.slice(i + 1)\n        ];\n        const perms = getPermutations(rest);\n        for (const perm of perms){\n            result.push([\n                arr[i],\n                ...perm\n            ]);\n        }\n    }\n    return result;\n}\nfunction getElementWikipediaUrl(elementName) {\n    return \"https://en.wikipedia.org/wiki/\".concat(encodeURIComponent(elementName));\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/compoundLookup.ts\n"));

/***/ })

}]);