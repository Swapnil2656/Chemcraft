"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/mixer/page",{

/***/ "(app-pages-browser)/./src/lib/chemCraftAI.ts":
/*!********************************!*\
  !*** ./src/lib/chemCraftAI.ts ***!
  \********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chemCraftAI: function() { return /* binding */ chemCraftAI; }\n/* harmony export */ });\n/**\r\n * ChemCraft AI Compound Prediction Engine\r\n * Advanced chemistry prediction system with rules engine, ML model, and PubChem integration\r\n */ class ChemCraftAI {\n    async predictCompound(elementsOrElement1, element2) {\n        // Handle different input formats\n        if (Array.isArray(elementsOrElement1)) {\n            return this.predictCompoundWithCounts(elementsOrElement1);\n        } else if (element2) {\n            return this.predictBinaryCompound(elementsOrElement1, element2);\n        } else {\n            throw new Error(\"Invalid input format for predictCompound\");\n        }\n    }\n    async predictBinaryCompound(element1, element2) {\n        const cacheKey = this.getCacheKey(element1, element2);\n        // Check cache first\n        if (this.cache.has(cacheKey)) {\n            return this.cache.get(cacheKey);\n        }\n        // Step 1: Check existing database\n        const existing = this.searchDatabase(element1, element2);\n        if (existing) {\n            const result = {\n                ...existing,\n                source: \"database\",\n                confidence: 1.0\n            };\n            this.cache.set(cacheKey, result);\n            return result;\n        }\n        // Step 2: Try PubChem API (highest priority for verification)\n        try {\n            const pubchemResult = await this.fetchFromPubChem(element1, element2);\n            if (pubchemResult.will_react) {\n                this.cache.set(cacheKey, pubchemResult);\n                return pubchemResult;\n            }\n        } catch (error) {\n            console.warn(\"PubChem API failed, falling back to rules engine\");\n        }\n        // Step 3: Apply chemistry rules\n        const rulesResult = this.applyChemistryRules(element1, element2);\n        if (rulesResult.confidence > 0.8) {\n            this.cache.set(cacheKey, rulesResult);\n            return rulesResult;\n        }\n        // Step 4: Use ML prediction\n        const mlResult = this.runMLModel(element1, element2);\n        if (mlResult.confidence > 0.6) {\n            this.cache.set(cacheKey, mlResult);\n            return mlResult;\n        }\n        // Step 5: Return no reaction\n        const noReaction = {\n            will_react: false,\n            confidence: 0.9,\n            source: \"rules_engine\",\n            reason: \"No favorable reaction conditions found\"\n        };\n        this.cache.set(cacheKey, noReaction);\n        return noReaction;\n    }\n    /**\r\n   * Chemistry Rules Engine - Core prediction logic\r\n   */ applyChemistryRules(e1, e2) {\n        const elem1 = this.elements.get(e1);\n        const elem2 = this.elements.get(e2);\n        if (!elem1 || !elem2) {\n            return {\n                will_react: false,\n                confidence: 0,\n                source: \"rules_engine\"\n            };\n        }\n        // Rule R001: Alkali Metal + Halogen → Ionic Salt\n        if (this.isAlkaliMetal(e1) && this.isHalogen(e2)) {\n            return {\n                will_react: true,\n                confidence: 1.0,\n                formula: \"\".concat(e1).concat(e2),\n                name: \"\".concat(elem1.name, \" \").concat(this.getHalideIonName(e2)),\n                properties: {\n                    state: \"solid\",\n                    color: \"white\",\n                    type: \"ionic\",\n                    crystal_structure: \"cubic\"\n                },\n                safety: {\n                    hazard_level: \"safe\",\n                    handling: \"standard\"\n                },\n                uses: [\n                    \"Food seasoning (if NaCl)\",\n                    \"De-icing agent\",\n                    \"Chemical synthesis\",\n                    \"Water treatment\"\n                ],\n                source: \"rules_engine\",\n                rule_applied: \"R001: Alkali Metal + Halogen\",\n                warnings: [\n                    \"Violent reaction during formation\"\n                ]\n            };\n        }\n        // Rule R002: Alkaline Earth + Halogen → Ionic Salt\n        if (this.isAlkalineEarthMetal(e1) && this.isHalogen(e2)) {\n            return {\n                will_react: true,\n                confidence: 0.95,\n                formula: \"\".concat(e1).concat(e2, \"2\"),\n                name: \"\".concat(elem1.name, \" \").concat(this.getHalideIonName(e2)),\n                properties: {\n                    state: \"solid\",\n                    type: \"ionic\"\n                },\n                source: \"rules_engine\",\n                rule_applied: \"R002: Alkaline Earth + Halogen\"\n            };\n        }\n        // Rule R003: Metal + Oxygen → Metal Oxide\n        if (this.isMetal(e1) && e2 === \"O\" && ![\n            \"Au\",\n            \"Pt\",\n            \"Ag\"\n        ].includes(e1)) {\n            const formula = this.calculateOxideFormula(e1);\n            return {\n                will_react: true,\n                confidence: 0.85,\n                formula: formula,\n                name: \"\".concat(elem1.name, \" oxide\"),\n                properties: {\n                    state: \"solid\",\n                    type: \"ionic_oxide\",\n                    color: this.predictOxideColor(e1)\n                },\n                source: \"rules_engine\",\n                rule_applied: \"R003: Metal + Oxygen\"\n            };\n        }\n        // Rule R004: Hydrogen + Nonmetal → Binary Compound\n        if (e1 === \"H\" && this.isNonmetal(e2)) {\n            return this.predictHydrogenCompound(e2);\n        }\n        // Rule R005: Noble Gas + Any → No Reaction\n        if ([\n            \"He\",\n            \"Ne\",\n            \"Ar\",\n            \"Kr\"\n        ].includes(e1) || [\n            \"He\",\n            \"Ne\",\n            \"Ar\",\n            \"Kr\"\n        ].includes(e2)) {\n            return {\n                will_react: false,\n                confidence: 1.0,\n                source: \"rules_engine\",\n                rule_applied: \"R005: Noble Gas Inertness\",\n                reason: \"Noble gases are chemically inert\"\n            };\n        }\n        // Rule R006: Xenon + Fluorine → Xenon Fluoride\n        if (e1 === \"Xe\" && e2 === \"F\" || e1 === \"F\" && e2 === \"Xe\") {\n            return {\n                will_react: true,\n                confidence: 0.7,\n                formula: \"XeF2\",\n                name: \"Xenon difluoride\",\n                properties: {\n                    state: \"solid\",\n                    color: \"colorless\",\n                    stability: \"metastable\"\n                },\n                source: \"rules_engine\",\n                rule_applied: \"R006: Noble Gas Exception\",\n                warnings: [\n                    \"Requires extreme conditions\",\n                    \"Highly reactive compound\"\n                ]\n            };\n        }\n        // Rule R007: Transition Metal + Transition Metal → Alloy\n        if (this.isTransitionMetal(e1) && this.isTransitionMetal(e2)) {\n            return {\n                will_react: false,\n                confidence: 0.85,\n                source: \"rules_engine\",\n                rule_applied: \"R007: Metal-Metal Alloy\",\n                reason: \"Forms metallic mixture (alloy), not chemical compound\",\n                note: \"May form intermetallic compounds under specific conditions\"\n            };\n        }\n        // Additional comprehensive rules for common element combinations\n        // Rule R008: Transition Metal + Halogen → Transition Metal Halide\n        if (this.isTransitionMetal(e1) && this.isHalogen(e2)) {\n            return {\n                will_react: true,\n                confidence: 0.9,\n                formula: this.getTransitionMetalHalideFormula(e1, e2),\n                name: \"\".concat(elem1 === null || elem1 === void 0 ? void 0 : elem1.name, \" \").concat(this.getHalideIonName(e2)),\n                properties: {\n                    state: \"solid\",\n                    type: \"ionic compound\",\n                    color: this.getTransitionMetalColor(e1, e2)\n                },\n                safety: {\n                    hazard_level: \"medium\",\n                    warnings: [\n                        \"May be toxic\",\n                        \"Handle with care\"\n                    ]\n                },\n                uses: [\n                    \"Catalysts\",\n                    \"Chemical synthesis\",\n                    \"Research\"\n                ],\n                source: \"rules_engine\",\n                rule_applied: \"R008: Transition Metal + Halogen\",\n                warnings: []\n            };\n        }\n        // Rule R009: Carbon + Hydrogen → Hydrocarbon\n        if (e1 === \"C\" && e2 === \"H\" || e1 === \"H\" && e2 === \"C\") {\n            return {\n                will_react: true,\n                confidence: 0.95,\n                formula: \"CH4\",\n                name: \"methane\",\n                properties: {\n                    state: \"gas\",\n                    type: \"organic compound\",\n                    color: \"colorless\"\n                },\n                safety: {\n                    hazard_level: \"medium\",\n                    warnings: [\n                        \"Flammable gas\",\n                        \"Asphyxiant in high concentrations\"\n                    ]\n                },\n                uses: [\n                    \"Natural gas\",\n                    \"Fuel\",\n                    \"Chemical feedstock\"\n                ],\n                source: \"rules_engine\",\n                rule_applied: \"R009: Carbon + Hydrogen → Simple Hydrocarbon\",\n                warnings: [\n                    \"Highly flammable\"\n                ]\n            };\n        }\n        // Rule R010: Metal + Sulfur → Metal Sulfide\n        if (this.isMetal(e1) && e2 === \"S\") {\n            return {\n                will_react: true,\n                confidence: 0.9,\n                formula: this.getMetalSulfideFormula(e1),\n                name: \"\".concat(elem1 === null || elem1 === void 0 ? void 0 : elem1.name, \" sulfide\"),\n                properties: {\n                    state: \"solid\",\n                    type: \"ionic compound\",\n                    color: this.getSulfideColor(e1)\n                },\n                safety: {\n                    hazard_level: \"medium\",\n                    warnings: [\n                        \"May release toxic H2S gas when wet\"\n                    ]\n                },\n                uses: [\n                    \"Semiconductors\",\n                    \"Pigments\",\n                    \"Metallurgy\"\n                ],\n                source: \"rules_engine\",\n                rule_applied: \"R010: Metal + Sulfur → Metal Sulfide\",\n                warnings: []\n            };\n        }\n        // Rule R011: Nitrogen + Hydrogen → Ammonia\n        if (e1 === \"N\" && e2 === \"H\" || e1 === \"H\" && e2 === \"N\") {\n            return {\n                will_react: true,\n                confidence: 0.85,\n                formula: \"NH3\",\n                name: \"ammonia\",\n                properties: {\n                    state: \"gas\",\n                    type: \"molecular compound\",\n                    color: \"colorless\"\n                },\n                safety: {\n                    hazard_level: \"high\",\n                    warnings: [\n                        \"Toxic gas\",\n                        \"Corrosive\",\n                        \"Irritant to eyes and respiratory system\"\n                    ]\n                },\n                uses: [\n                    \"Fertilizer production\",\n                    \"Cleaning agent\",\n                    \"Refrigerant\"\n                ],\n                source: \"rules_engine\",\n                rule_applied: \"R011: Nitrogen + Hydrogen → Ammonia\",\n                warnings: [\n                    \"Requires high pressure and temperature\",\n                    \"Toxic vapors\"\n                ]\n            };\n        }\n        // Rule R012: Carbon + Oxygen → Carbon Compounds\n        if (e1 === \"C\" && e2 === \"O\" || e1 === \"O\" && e2 === \"C\") {\n            return {\n                will_react: true,\n                confidence: 0.95,\n                formula: \"CO2\",\n                name: \"carbon dioxide\",\n                properties: {\n                    state: \"gas\",\n                    type: \"molecular compound\",\n                    color: \"colorless\"\n                },\n                safety: {\n                    hazard_level: \"low\",\n                    warnings: [\n                        \"Asphyxiant in high concentrations\"\n                    ]\n                },\n                uses: [\n                    \"Fire extinguisher\",\n                    \"Carbonated beverages\",\n                    \"Dry ice\"\n                ],\n                source: \"rules_engine\",\n                rule_applied: \"R012: Carbon + Oxygen → Carbon Dioxide\",\n                warnings: []\n            };\n        }\n        // Rule R013: Silicon + Oxygen → Silicon Dioxide\n        if (e1 === \"Si\" && e2 === \"O\" || e1 === \"O\" && e2 === \"Si\") {\n            return {\n                will_react: true,\n                confidence: 1.0,\n                formula: \"SiO2\",\n                name: \"silicon dioxide\",\n                properties: {\n                    state: \"solid\",\n                    type: \"covalent network\",\n                    color: \"white\"\n                },\n                safety: {\n                    hazard_level: \"low\",\n                    warnings: [\n                        \"Dust may cause respiratory irritation\"\n                    ]\n                },\n                uses: [\n                    \"Glass manufacturing\",\n                    \"Electronics\",\n                    \"Ceramics\"\n                ],\n                source: \"rules_engine\",\n                rule_applied: \"R013: Silicon + Oxygen → Silicon Dioxide\",\n                warnings: []\n            };\n        }\n        // Default: No clear rule match\n        return {\n            will_react: false,\n            confidence: 0.3,\n            source: \"rules_engine\",\n            reason: \"No applicable chemistry rule found\"\n        };\n    }\n    /**\r\n   * Machine Learning Model Prediction\r\n   */ runMLModel(e1, e2) {\n        const elem1 = this.elements.get(e1);\n        const elem2 = this.elements.get(e2);\n        if (!elem1 || !elem2) {\n            return {\n                will_react: false,\n                confidence: 0,\n                source: \"ml_model\"\n            };\n        }\n        // Extract features for ML model\n        const features = this.extractFeatures(elem1, elem2);\n        // Simple rule-based ML simulation (in production, use actual trained model)\n        const prediction = this.simulateMLPrediction(features);\n        return {\n            will_react: prediction.probability > 0.6,\n            confidence: prediction.probability,\n            formula: prediction.formula,\n            source: \"ml_model\",\n            properties: prediction.properties\n        };\n    }\n    /**\r\n   * PubChem API Integration\r\n   */ async fetchFromPubChem(e1, e2) {\n        // Try common formula patterns\n        const formulaPatterns = this.generateFormulaPatterns(e1, e2);\n        for (const formula of formulaPatterns){\n            try {\n                const response = await fetch(\"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/fastformula/\".concat(formula, \"/JSON\"), {\n                    headers: {\n                        \"Accept\": \"application/json\"\n                    },\n                    signal: AbortSignal.timeout(5000) // 5 second timeout\n                });\n                if (response.ok) {\n                    const data = await response.json();\n                    if (data.PC_Compounds && data.PC_Compounds.length > 0) {\n                        return this.parsePubChemData(data.PC_Compounds[0], formula);\n                    }\n                }\n            } catch (error) {\n                console.warn(\"PubChem lookup failed for \".concat(formula, \":\"), error);\n                continue;\n            }\n        }\n        return {\n            will_react: false,\n            confidence: 0,\n            source: \"pubchem_api\"\n        };\n    }\n    /**\r\n   * Helper Methods\r\n   */ isAlkaliMetal(symbol) {\n        return [\n            \"Li\",\n            \"Na\",\n            \"K\",\n            \"Rb\",\n            \"Cs\",\n            \"Fr\"\n        ].includes(symbol);\n    }\n    isAlkalineEarthMetal(symbol) {\n        return [\n            \"Be\",\n            \"Mg\",\n            \"Ca\",\n            \"Sr\",\n            \"Ba\",\n            \"Ra\"\n        ].includes(symbol);\n    }\n    isHalogen(symbol) {\n        return [\n            \"F\",\n            \"Cl\",\n            \"Br\",\n            \"I\",\n            \"At\"\n        ].includes(symbol);\n    }\n    isMetal(symbol) {\n        const element = this.elements.get(symbol);\n        return (element === null || element === void 0 ? void 0 : element.category.includes(\"metal\")) || false;\n    }\n    isNonmetal(symbol) {\n        const element = this.elements.get(symbol);\n        return (element === null || element === void 0 ? void 0 : element.category) === \"nonmetals\" || false;\n    }\n    getHalideIonName(halogen) {\n        const names = {\n            \"F\": \"Fluoride\",\n            \"Cl\": \"Chloride\",\n            \"Br\": \"Bromide\",\n            \"I\": \"Iodide\",\n            \"At\": \"Astatide\"\n        };\n        return names[halogen] || \"halide\";\n    }\n    calculateOxideFormula(metal) {\n        const element = this.elements.get(metal);\n        if (!element) return \"\".concat(metal, \"O\");\n        // Use most common oxidation state\n        const oxidationState = element.oxidationStates[0] || 2;\n        if (oxidationState === 1) return \"\".concat(metal, \"2O\");\n        if (oxidationState === 2) return \"\".concat(metal, \"O\");\n        if (oxidationState === 3) return \"\".concat(metal, \"2O3\");\n        if (oxidationState === 4) return \"\".concat(metal, \"O2\");\n        return \"\".concat(metal, \"O\");\n    }\n    predictOxideColor(metal) {\n        const colors = {\n            \"Fe\": \"reddish-brown\",\n            \"Cu\": \"black\",\n            \"Cr\": \"green\",\n            \"Mn\": \"brown\",\n            \"Ni\": \"green\",\n            \"Co\": \"black\",\n            \"Ti\": \"white\",\n            \"Al\": \"white\",\n            \"Zn\": \"white\",\n            \"Mg\": \"white\",\n            \"Ca\": \"white\"\n        };\n        return colors[metal] || \"white\";\n    }\n    predictHydrogenCompound(nonmetal) {\n        const compounds = {\n            \"O\": {\n                formula: \"H2O\",\n                name: \"Water\",\n                confidence: 1.0,\n                properties: {\n                    state: \"liquid\",\n                    color: \"colorless\"\n                },\n                uses: [\n                    \"Universal solvent\",\n                    \"Drinking water\",\n                    \"Chemical reactions\"\n                ]\n            },\n            \"S\": {\n                formula: \"H2S\",\n                name: \"Hydrogen sulfide\",\n                confidence: 0.9,\n                properties: {\n                    state: \"gas\",\n                    color: \"colorless\",\n                    odor: \"rotten eggs\"\n                },\n                warnings: [\n                    \"Toxic gas\",\n                    \"Flammable\"\n                ]\n            },\n            \"N\": {\n                formula: \"NH3\",\n                name: \"Ammonia\",\n                confidence: 0.9,\n                properties: {\n                    state: \"gas\",\n                    color: \"colorless\",\n                    odor: \"pungent\"\n                },\n                uses: [\n                    \"Fertilizer\",\n                    \"Cleaning products\",\n                    \"Refrigeration\"\n                ]\n            },\n            \"Cl\": {\n                formula: \"HCl\",\n                name: \"Hydrogen chloride\",\n                confidence: 0.95,\n                properties: {\n                    state: \"gas\",\n                    color: \"colorless\"\n                },\n                warnings: [\n                    \"Corrosive\",\n                    \"Forms hydrochloric acid in water\"\n                ]\n            }\n        };\n        const compound = compounds[nonmetal];\n        if (compound) {\n            return {\n                will_react: true,\n                source: \"rules_engine\",\n                rule_applied: \"R004: Hydrogen + Nonmetal\",\n                ...compound\n            };\n        }\n        return {\n            will_react: false,\n            confidence: 0.4,\n            source: \"rules_engine\"\n        };\n    }\n    extractFeatures(elem1, elem2) {\n        return [\n            Math.abs(elem1.electronegativity - elem2.electronegativity),\n            elem1.atomicNumber + elem2.atomicNumber,\n            this.getGroupCompatibility(elem1, elem2),\n            Math.abs(elem1.period - elem2.period),\n            this.isMetalNonmetalPair(elem1, elem2) ? 1 : 0,\n            elem1.valenceElectrons + elem2.valenceElectrons,\n            this.calculateIonicPotential(elem1, elem2) // ionic_potential\n        ];\n    }\n    simulateMLPrediction(features) {\n        // Simplified ML simulation - in production, use actual trained model\n        const [enDiff, atomSum, groupComp, periodDiff, metalNonmetal, valence, ionic] = features;\n        let probability = 0.5;\n        // Boost probability for metal-nonmetal pairs\n        if (metalNonmetal) probability += 0.2;\n        // Boost for electronegativity difference\n        if (enDiff > 1.5) probability += 0.15;\n        // Reduce for noble gas involvement\n        if (atomSum === 10 || atomSum === 18 || atomSum === 36) probability = 0.05;\n        // Boost for group compatibility\n        probability += groupComp * 0.1;\n        return {\n            probability: Math.min(0.95, Math.max(0.05, probability)),\n            formula: \"predicted\",\n            properties: {\n                predicted: true\n            }\n        };\n    }\n    getGroupCompatibility(elem1, elem2) {\n        // Simple heuristic for group compatibility\n        if (elem1.group === 1 && elem2.group === 17 || elem1.group === 17 && elem2.group === 1) return 1;\n        if (elem1.group === 2 && elem2.group === 17 || elem1.group === 17 && elem2.group === 2) return 0.9;\n        return 0.3;\n    }\n    isMetalNonmetalPair(elem1, elem2) {\n        const metal1 = this.isMetal(elem1.symbol);\n        const metal2 = this.isMetal(elem2.symbol);\n        return metal1 !== metal2; // One is metal, one is not\n    }\n    calculateIonicPotential(elem1, elem2) {\n        return Math.abs(elem1.electronegativity - elem2.electronegativity) / 4.0;\n    }\n    generateFormulaPatterns(e1, e2) {\n        return [\n            \"\".concat(e1).concat(e2),\n            \"\".concat(e2).concat(e1),\n            \"\".concat(e1, \"2\").concat(e2),\n            \"\".concat(e1).concat(e2, \"2\"),\n            \"\".concat(e1, \"2\").concat(e2, \"3\"),\n            \"\".concat(e1, \"3\").concat(e2, \"2\")\n        ];\n    }\n    parsePubChemData(compound, formula) {\n        var _compound_props_find_value, _compound_props_find, _compound_props, _compound_id_id, _compound_id;\n        return {\n            will_react: true,\n            confidence: 1.0,\n            formula: formula,\n            name: ((_compound_props = compound.props) === null || _compound_props === void 0 ? void 0 : (_compound_props_find = _compound_props.find((p)=>p.urn.label === \"IUPAC Name\")) === null || _compound_props_find === void 0 ? void 0 : (_compound_props_find_value = _compound_props_find.value) === null || _compound_props_find_value === void 0 ? void 0 : _compound_props_find_value.sval) || \"Unknown\",\n            source: \"pubchem_api\",\n            properties: {\n                verified: true,\n                pubchem_cid: (_compound_id = compound.id) === null || _compound_id === void 0 ? void 0 : (_compound_id_id = _compound_id.id) === null || _compound_id_id === void 0 ? void 0 : _compound_id_id.cid\n            }\n        };\n    }\n    searchDatabase(e1, e2) {\n        // Search existing compound database\n        // Implementation would check all compound categories\n        return null; // Placeholder\n    }\n    getCacheKey(e1, e2) {\n        return [\n            e1,\n            e2\n        ].sort().join(\"-\");\n    }\n    async loadDatabase() {\n        // For now, always use the essential compounds fallback to ensure system works\n        // This avoids fetch issues while maintaining full functionality\n        console.log(\"Loading essential compounds database...\");\n        this.loadEssentialCompounds();\n        // Optional: Try to load full database in background (browser only)\n        if (true) {\n            try {\n                const response = await fetch(\"/data/chemcraft-complete-database-550.json\");\n                const fullDatabase = await response.json();\n                // Merge with essential compounds\n                this.database = {\n                    ...this.database,\n                    ...fullDatabase\n                };\n                console.log(\"Full database loaded successfully\");\n            } catch (error) {\n                console.log(\"Full database not available, using essential compounds only\");\n            }\n        }\n    }\n    initializeElements() {\n        // Initialize comprehensive element data for all 118 elements\n        const allElements = [\n            // Period 1\n            {\n                symbol: \"H\",\n                name: \"Hydrogen\",\n                atomicNumber: 1,\n                group: 1,\n                period: 1,\n                category: \"nonmetal\",\n                electronegativity: 2.20,\n                oxidationStates: [\n                    1,\n                    -1\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"He\",\n                name: \"Helium\",\n                atomicNumber: 2,\n                group: 18,\n                period: 1,\n                category: \"noble gas\",\n                electronegativity: 0,\n                oxidationStates: [\n                    0\n                ],\n                valenceElectrons: 2\n            },\n            // Period 2\n            {\n                symbol: \"Li\",\n                name: \"Lithium\",\n                atomicNumber: 3,\n                group: 1,\n                period: 2,\n                category: \"alkali metal\",\n                electronegativity: 0.98,\n                oxidationStates: [\n                    1\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Be\",\n                name: \"Beryllium\",\n                atomicNumber: 4,\n                group: 2,\n                period: 2,\n                category: \"alkaline earth metal\",\n                electronegativity: 1.57,\n                oxidationStates: [\n                    2\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"B\",\n                name: \"Boron\",\n                atomicNumber: 5,\n                group: 13,\n                period: 2,\n                category: \"metalloid\",\n                electronegativity: 2.04,\n                oxidationStates: [\n                    3\n                ],\n                valenceElectrons: 3\n            },\n            {\n                symbol: \"C\",\n                name: \"Carbon\",\n                atomicNumber: 6,\n                group: 14,\n                period: 2,\n                category: \"nonmetal\",\n                electronegativity: 2.55,\n                oxidationStates: [\n                    4,\n                    -4,\n                    2\n                ],\n                valenceElectrons: 4\n            },\n            {\n                symbol: \"N\",\n                name: \"Nitrogen\",\n                atomicNumber: 7,\n                group: 15,\n                period: 2,\n                category: \"nonmetal\",\n                electronegativity: 3.04,\n                oxidationStates: [\n                    -3,\n                    3,\n                    5\n                ],\n                valenceElectrons: 5\n            },\n            {\n                symbol: \"O\",\n                name: \"Oxygen\",\n                atomicNumber: 8,\n                group: 16,\n                period: 2,\n                category: \"nonmetal\",\n                electronegativity: 3.44,\n                oxidationStates: [\n                    -2\n                ],\n                valenceElectrons: 6\n            },\n            {\n                symbol: \"F\",\n                name: \"Fluorine\",\n                atomicNumber: 9,\n                group: 17,\n                period: 2,\n                category: \"halogen\",\n                electronegativity: 3.98,\n                oxidationStates: [\n                    -1\n                ],\n                valenceElectrons: 7\n            },\n            {\n                symbol: \"Ne\",\n                name: \"Neon\",\n                atomicNumber: 10,\n                group: 18,\n                period: 2,\n                category: \"noble gas\",\n                electronegativity: 0,\n                oxidationStates: [\n                    0\n                ],\n                valenceElectrons: 8\n            },\n            // Period 3\n            {\n                symbol: \"Na\",\n                name: \"Sodium\",\n                atomicNumber: 11,\n                group: 1,\n                period: 3,\n                category: \"alkali metal\",\n                electronegativity: 0.93,\n                oxidationStates: [\n                    1\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Mg\",\n                name: \"Magnesium\",\n                atomicNumber: 12,\n                group: 2,\n                period: 3,\n                category: \"alkaline earth metal\",\n                electronegativity: 1.31,\n                oxidationStates: [\n                    2\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"Al\",\n                name: \"Aluminum\",\n                atomicNumber: 13,\n                group: 13,\n                period: 3,\n                category: \"post-transition metal\",\n                electronegativity: 1.61,\n                oxidationStates: [\n                    3\n                ],\n                valenceElectrons: 3\n            },\n            {\n                symbol: \"Si\",\n                name: \"Silicon\",\n                atomicNumber: 14,\n                group: 14,\n                period: 3,\n                category: \"metalloid\",\n                electronegativity: 1.90,\n                oxidationStates: [\n                    4,\n                    -4\n                ],\n                valenceElectrons: 4\n            },\n            {\n                symbol: \"P\",\n                name: \"Phosphorus\",\n                atomicNumber: 15,\n                group: 15,\n                period: 3,\n                category: \"nonmetal\",\n                electronegativity: 2.19,\n                oxidationStates: [\n                    -3,\n                    3,\n                    5\n                ],\n                valenceElectrons: 5\n            },\n            {\n                symbol: \"S\",\n                name: \"Sulfur\",\n                atomicNumber: 16,\n                group: 16,\n                period: 3,\n                category: \"nonmetal\",\n                electronegativity: 2.58,\n                oxidationStates: [\n                    -2,\n                    4,\n                    6\n                ],\n                valenceElectrons: 6\n            },\n            {\n                symbol: \"Cl\",\n                name: \"Chlorine\",\n                atomicNumber: 17,\n                group: 17,\n                period: 3,\n                category: \"halogen\",\n                electronegativity: 3.16,\n                oxidationStates: [\n                    -1,\n                    1,\n                    3,\n                    5,\n                    7\n                ],\n                valenceElectrons: 7\n            },\n            {\n                symbol: \"Ar\",\n                name: \"Argon\",\n                atomicNumber: 18,\n                group: 18,\n                period: 3,\n                category: \"noble gas\",\n                electronegativity: 0,\n                oxidationStates: [\n                    0\n                ],\n                valenceElectrons: 8\n            },\n            // Period 4\n            {\n                symbol: \"K\",\n                name: \"Potassium\",\n                atomicNumber: 19,\n                group: 1,\n                period: 4,\n                category: \"alkali metal\",\n                electronegativity: 0.82,\n                oxidationStates: [\n                    1\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Ca\",\n                name: \"Calcium\",\n                atomicNumber: 20,\n                group: 2,\n                period: 4,\n                category: \"alkaline earth metal\",\n                electronegativity: 1.00,\n                oxidationStates: [\n                    2\n                ],\n                valenceElectrons: 2\n            },\n            // Transition metals (Period 4)\n            {\n                symbol: \"Sc\",\n                name: \"Scandium\",\n                atomicNumber: 21,\n                group: 3,\n                period: 4,\n                category: \"transition metal\",\n                electronegativity: 1.36,\n                oxidationStates: [\n                    3\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"Ti\",\n                name: \"Titanium\",\n                atomicNumber: 22,\n                group: 4,\n                period: 4,\n                category: \"transition metal\",\n                electronegativity: 1.54,\n                oxidationStates: [\n                    2,\n                    3,\n                    4\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"V\",\n                name: \"Vanadium\",\n                atomicNumber: 23,\n                group: 5,\n                period: 4,\n                category: \"transition metal\",\n                electronegativity: 1.63,\n                oxidationStates: [\n                    2,\n                    3,\n                    4,\n                    5\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"Cr\",\n                name: \"Chromium\",\n                atomicNumber: 24,\n                group: 6,\n                period: 4,\n                category: \"transition metal\",\n                electronegativity: 1.66,\n                oxidationStates: [\n                    2,\n                    3,\n                    6\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Mn\",\n                name: \"Manganese\",\n                atomicNumber: 25,\n                group: 7,\n                period: 4,\n                category: \"transition metal\",\n                electronegativity: 1.55,\n                oxidationStates: [\n                    2,\n                    3,\n                    4,\n                    6,\n                    7\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"Fe\",\n                name: \"Iron\",\n                atomicNumber: 26,\n                group: 8,\n                period: 4,\n                category: \"transition metal\",\n                electronegativity: 1.83,\n                oxidationStates: [\n                    2,\n                    3\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"Co\",\n                name: \"Cobalt\",\n                atomicNumber: 27,\n                group: 9,\n                period: 4,\n                category: \"transition metal\",\n                electronegativity: 1.88,\n                oxidationStates: [\n                    2,\n                    3\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"Ni\",\n                name: \"Nickel\",\n                atomicNumber: 28,\n                group: 10,\n                period: 4,\n                category: \"transition metal\",\n                electronegativity: 1.91,\n                oxidationStates: [\n                    2\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"Cu\",\n                name: \"Copper\",\n                atomicNumber: 29,\n                group: 11,\n                period: 4,\n                category: \"transition metal\",\n                electronegativity: 1.90,\n                oxidationStates: [\n                    1,\n                    2\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Zn\",\n                name: \"Zinc\",\n                atomicNumber: 30,\n                group: 12,\n                period: 4,\n                category: \"transition metal\",\n                electronegativity: 1.65,\n                oxidationStates: [\n                    2\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"Ga\",\n                name: \"Gallium\",\n                atomicNumber: 31,\n                group: 13,\n                period: 4,\n                category: \"post-transition metal\",\n                electronegativity: 1.81,\n                oxidationStates: [\n                    3\n                ],\n                valenceElectrons: 3\n            },\n            {\n                symbol: \"Ge\",\n                name: \"Germanium\",\n                atomicNumber: 32,\n                group: 14,\n                period: 4,\n                category: \"metalloid\",\n                electronegativity: 2.01,\n                oxidationStates: [\n                    4\n                ],\n                valenceElectrons: 4\n            },\n            {\n                symbol: \"As\",\n                name: \"Arsenic\",\n                atomicNumber: 33,\n                group: 15,\n                period: 4,\n                category: \"metalloid\",\n                electronegativity: 2.18,\n                oxidationStates: [\n                    -3,\n                    3,\n                    5\n                ],\n                valenceElectrons: 5\n            },\n            {\n                symbol: \"Se\",\n                name: \"Selenium\",\n                atomicNumber: 34,\n                group: 16,\n                period: 4,\n                category: \"nonmetal\",\n                electronegativity: 2.55,\n                oxidationStates: [\n                    -2,\n                    4,\n                    6\n                ],\n                valenceElectrons: 6\n            },\n            {\n                symbol: \"Br\",\n                name: \"Bromine\",\n                atomicNumber: 35,\n                group: 17,\n                period: 4,\n                category: \"halogen\",\n                electronegativity: 2.96,\n                oxidationStates: [\n                    -1,\n                    1,\n                    3,\n                    5,\n                    7\n                ],\n                valenceElectrons: 7\n            },\n            {\n                symbol: \"Kr\",\n                name: \"Krypton\",\n                atomicNumber: 36,\n                group: 18,\n                period: 4,\n                category: \"noble gas\",\n                electronegativity: 3.00,\n                oxidationStates: [\n                    0,\n                    2\n                ],\n                valenceElectrons: 8\n            },\n            // Period 5\n            {\n                symbol: \"Rb\",\n                name: \"Rubidium\",\n                atomicNumber: 37,\n                group: 1,\n                period: 5,\n                category: \"alkali metal\",\n                electronegativity: 0.82,\n                oxidationStates: [\n                    1\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Sr\",\n                name: \"Strontium\",\n                atomicNumber: 38,\n                group: 2,\n                period: 5,\n                category: \"alkaline earth metal\",\n                electronegativity: 0.95,\n                oxidationStates: [\n                    2\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"Y\",\n                name: \"Yttrium\",\n                atomicNumber: 39,\n                group: 3,\n                period: 5,\n                category: \"transition metal\",\n                electronegativity: 1.22,\n                oxidationStates: [\n                    3\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"Zr\",\n                name: \"Zirconium\",\n                atomicNumber: 40,\n                group: 4,\n                period: 5,\n                category: \"transition metal\",\n                electronegativity: 1.33,\n                oxidationStates: [\n                    4\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"Nb\",\n                name: \"Niobium\",\n                atomicNumber: 41,\n                group: 5,\n                period: 5,\n                category: \"transition metal\",\n                electronegativity: 1.6,\n                oxidationStates: [\n                    5\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Mo\",\n                name: \"Molybdenum\",\n                atomicNumber: 42,\n                group: 6,\n                period: 5,\n                category: \"transition metal\",\n                electronegativity: 2.16,\n                oxidationStates: [\n                    6\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Tc\",\n                name: \"Technetium\",\n                atomicNumber: 43,\n                group: 7,\n                period: 5,\n                category: \"transition metal\",\n                electronegativity: 1.9,\n                oxidationStates: [\n                    7\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Ru\",\n                name: \"Ruthenium\",\n                atomicNumber: 44,\n                group: 8,\n                period: 5,\n                category: \"transition metal\",\n                electronegativity: 2.2,\n                oxidationStates: [\n                    3,\n                    4\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Rh\",\n                name: \"Rhodium\",\n                atomicNumber: 45,\n                group: 9,\n                period: 5,\n                category: \"transition metal\",\n                electronegativity: 2.28,\n                oxidationStates: [\n                    3\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Pd\",\n                name: \"Palladium\",\n                atomicNumber: 46,\n                group: 10,\n                period: 5,\n                category: \"transition metal\",\n                electronegativity: 2.20,\n                oxidationStates: [\n                    2,\n                    4\n                ],\n                valenceElectrons: 0\n            },\n            {\n                symbol: \"Ag\",\n                name: \"Silver\",\n                atomicNumber: 47,\n                group: 11,\n                period: 5,\n                category: \"transition metal\",\n                electronegativity: 1.93,\n                oxidationStates: [\n                    1\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Cd\",\n                name: \"Cadmium\",\n                atomicNumber: 48,\n                group: 12,\n                period: 5,\n                category: \"transition metal\",\n                electronegativity: 1.69,\n                oxidationStates: [\n                    2\n                ],\n                valenceElectrons: 2\n            },\n            {\n                symbol: \"In\",\n                name: \"Indium\",\n                atomicNumber: 49,\n                group: 13,\n                period: 5,\n                category: \"post-transition metal\",\n                electronegativity: 1.78,\n                oxidationStates: [\n                    3\n                ],\n                valenceElectrons: 3\n            },\n            {\n                symbol: \"Sn\",\n                name: \"Tin\",\n                atomicNumber: 50,\n                group: 14,\n                period: 5,\n                category: \"post-transition metal\",\n                electronegativity: 1.96,\n                oxidationStates: [\n                    2,\n                    4\n                ],\n                valenceElectrons: 4\n            },\n            {\n                symbol: \"Sb\",\n                name: \"Antimony\",\n                atomicNumber: 51,\n                group: 15,\n                period: 5,\n                category: \"metalloid\",\n                electronegativity: 2.05,\n                oxidationStates: [\n                    -3,\n                    3,\n                    5\n                ],\n                valenceElectrons: 5\n            },\n            {\n                symbol: \"Te\",\n                name: \"Tellurium\",\n                atomicNumber: 52,\n                group: 16,\n                period: 5,\n                category: \"metalloid\",\n                electronegativity: 2.1,\n                oxidationStates: [\n                    -2,\n                    4,\n                    6\n                ],\n                valenceElectrons: 6\n            },\n            {\n                symbol: \"I\",\n                name: \"Iodine\",\n                atomicNumber: 53,\n                group: 17,\n                period: 5,\n                category: \"halogen\",\n                electronegativity: 2.66,\n                oxidationStates: [\n                    -1,\n                    1,\n                    3,\n                    5,\n                    7\n                ],\n                valenceElectrons: 7\n            },\n            {\n                symbol: \"Xe\",\n                name: \"Xenon\",\n                atomicNumber: 54,\n                group: 18,\n                period: 5,\n                category: \"noble gas\",\n                electronegativity: 2.60,\n                oxidationStates: [\n                    0,\n                    2,\n                    4,\n                    6\n                ],\n                valenceElectrons: 8\n            },\n            // Period 6\n            {\n                symbol: \"Cs\",\n                name: \"Cesium\",\n                atomicNumber: 55,\n                group: 1,\n                period: 6,\n                category: \"alkali metal\",\n                electronegativity: 0.79,\n                oxidationStates: [\n                    1\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Ba\",\n                name: \"Barium\",\n                atomicNumber: 56,\n                group: 2,\n                period: 6,\n                category: \"alkaline earth metal\",\n                electronegativity: 0.89,\n                oxidationStates: [\n                    2\n                ],\n                valenceElectrons: 2\n            },\n            // Add more essential elements for comprehensive coverage\n            {\n                symbol: \"Au\",\n                name: \"Gold\",\n                atomicNumber: 79,\n                group: 11,\n                period: 6,\n                category: \"transition metal\",\n                electronegativity: 2.54,\n                oxidationStates: [\n                    1,\n                    3\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Pt\",\n                name: \"Platinum\",\n                atomicNumber: 78,\n                group: 10,\n                period: 6,\n                category: \"transition metal\",\n                electronegativity: 2.28,\n                oxidationStates: [\n                    2,\n                    4\n                ],\n                valenceElectrons: 1\n            },\n            {\n                symbol: \"Pb\",\n                name: \"Lead\",\n                atomicNumber: 82,\n                group: 14,\n                period: 6,\n                category: \"post-transition metal\",\n                electronegativity: 2.33,\n                oxidationStates: [\n                    2,\n                    4\n                ],\n                valenceElectrons: 4\n            },\n            {\n                symbol: \"Hg\",\n                name: \"Mercury\",\n                atomicNumber: 80,\n                group: 12,\n                period: 6,\n                category: \"transition metal\",\n                electronegativity: 2.00,\n                oxidationStates: [\n                    1,\n                    2\n                ],\n                valenceElectrons: 2\n            },\n            // Noble gases that can form compounds\n            {\n                symbol: \"Rn\",\n                name: \"Radon\",\n                atomicNumber: 86,\n                group: 18,\n                period: 6,\n                category: \"noble gas\",\n                electronegativity: 2.2,\n                oxidationStates: [\n                    0,\n                    2\n                ],\n                valenceElectrons: 8\n            }\n        ];\n        for (const element of allElements){\n            this.elements.set(element.symbol, element);\n        }\n    }\n    loadChemistryRules() {\n        var _this_database_chemistry_rules_engine, _this_database;\n        if ((_this_database = this.database) === null || _this_database === void 0 ? void 0 : (_this_database_chemistry_rules_engine = _this_database.chemistry_rules_engine) === null || _this_database_chemistry_rules_engine === void 0 ? void 0 : _this_database_chemistry_rules_engine.reactivity_rules) {\n            this.rules = this.database.chemistry_rules_engine.reactivity_rules;\n        }\n    }\n    loadEssentialCompounds() {\n        // Comprehensive fallback database with essential compounds for all common element combinations\n        this.database = {\n            compounds: {\n                binary_halides: [\n                    // Alkali metal halides\n                    {\n                        formula: \"LiF\",\n                        name: \"Lithium Fluoride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"medium\",\n                            warnings: [\n                                \"Toxic\"\n                            ]\n                        },\n                        uses: [\n                            \"Flux\",\n                            \"Optics\"\n                        ]\n                    },\n                    {\n                        formula: \"LiCl\",\n                        name: \"Lithium Chloride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Desiccant\",\n                            \"Medical\"\n                        ]\n                    },\n                    {\n                        formula: \"LiBr\",\n                        name: \"Lithium Bromide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Air conditioning\"\n                        ]\n                    },\n                    {\n                        formula: \"LiI\",\n                        name: \"Lithium Iodide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Electrolyte\"\n                        ]\n                    },\n                    {\n                        formula: \"NaF\",\n                        name: \"Sodium Fluoride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"medium\",\n                            warnings: [\n                                \"Toxic in large doses\"\n                            ]\n                        },\n                        uses: [\n                            \"Toothpaste\",\n                            \"Water fluoridation\"\n                        ]\n                    },\n                    {\n                        formula: \"NaCl\",\n                        name: \"Sodium Chloride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\",\n                            melting_point: \"801\\xb0C\",\n                            boiling_point: \"1465\\xb0C\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Table salt\",\n                            \"Food preservation\",\n                            \"De-icing\"\n                        ]\n                    },\n                    {\n                        formula: \"NaBr\",\n                        name: \"Sodium Bromide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Photography\",\n                            \"Medical sedative\"\n                        ]\n                    },\n                    {\n                        formula: \"NaI\",\n                        name: \"Sodium Iodide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Medical imaging\",\n                            \"Radiation detection\"\n                        ]\n                    },\n                    {\n                        formula: \"KF\",\n                        name: \"Potassium Fluoride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"medium\",\n                            warnings: [\n                                \"Toxic\"\n                            ]\n                        },\n                        uses: [\n                            \"Flux\",\n                            \"Etching\"\n                        ]\n                    },\n                    {\n                        formula: \"KCl\",\n                        name: \"Potassium Chloride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Fertilizer\",\n                            \"Medical uses\"\n                        ]\n                    },\n                    {\n                        formula: \"KBr\",\n                        name: \"Potassium Bromide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Photography\",\n                            \"Anticonvulsant\"\n                        ]\n                    },\n                    {\n                        formula: \"KI\",\n                        name: \"Potassium Iodide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Radiation protection\",\n                            \"Antiseptic\"\n                        ]\n                    },\n                    // Alkaline earth metal halides\n                    {\n                        formula: \"MgF2\",\n                        name: \"Magnesium Fluoride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Optics\",\n                            \"Ceramics\"\n                        ]\n                    },\n                    {\n                        formula: \"MgCl2\",\n                        name: \"Magnesium Chloride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"De-icing\",\n                            \"Supplement\"\n                        ]\n                    },\n                    {\n                        formula: \"CaF2\",\n                        name: \"Calcium Fluoride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"medium\",\n                            warnings: [\n                                \"Toxic if ingested\"\n                            ]\n                        },\n                        uses: [\n                            \"Steel production\",\n                            \"Glass manufacturing\"\n                        ]\n                    },\n                    {\n                        formula: \"CaCl2\",\n                        name: \"Calcium Chloride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"De-icing\",\n                            \"Desiccant\"\n                        ]\n                    },\n                    // Transition metal halides\n                    {\n                        formula: \"AgCl\",\n                        name: \"Silver Chloride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Photography\",\n                            \"Electrodes\"\n                        ]\n                    },\n                    {\n                        formula: \"AgBr\",\n                        name: \"Silver Bromide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"pale yellow\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Photography\"\n                        ]\n                    },\n                    {\n                        formula: \"CuCl\",\n                        name: \"Copper(I) Chloride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"medium\",\n                            warnings: [\n                                \"Irritant\"\n                            ]\n                        },\n                        uses: [\n                            \"Catalyst\",\n                            \"Preservative\"\n                        ]\n                    },\n                    {\n                        formula: \"FeCl2\",\n                        name: \"Iron(II) Chloride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"green\"\n                        },\n                        safety_data: {\n                            hazard_level: \"medium\",\n                            warnings: [\n                                \"Corrosive\"\n                            ]\n                        },\n                        uses: [\n                            \"Water treatment\"\n                        ]\n                    },\n                    {\n                        formula: \"ZnCl2\",\n                        name: \"Zinc Chloride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"medium\",\n                            warnings: [\n                                \"Corrosive\"\n                            ]\n                        },\n                        uses: [\n                            \"Flux\",\n                            \"Preservative\"\n                        ]\n                    }\n                ],\n                binary_oxides: [\n                    {\n                        formula: \"H2O\",\n                        name: \"Water\",\n                        properties: {\n                            state: \"liquid\",\n                            type: \"molecular compound\",\n                            color: \"colorless\",\n                            melting_point: \"0\\xb0C\",\n                            boiling_point: \"100\\xb0C\"\n                        },\n                        safety_data: {\n                            hazard_level: \"none\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Universal solvent\",\n                            \"Essential for life\"\n                        ]\n                    },\n                    {\n                        formula: \"CO\",\n                        name: \"Carbon Monoxide\",\n                        properties: {\n                            state: \"gas\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Extremely toxic\",\n                                \"Odorless poisonous gas\"\n                            ]\n                        },\n                        uses: [\n                            \"Industrial reducing agent\"\n                        ]\n                    },\n                    {\n                        formula: \"CO2\",\n                        name: \"Carbon Dioxide\",\n                        properties: {\n                            state: \"gas\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: [\n                                \"Asphyxiant in high concentrations\"\n                            ]\n                        },\n                        uses: [\n                            \"Fire extinguisher\",\n                            \"Carbonated beverages\"\n                        ]\n                    },\n                    {\n                        formula: \"SiO2\",\n                        name: \"Silicon Dioxide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"covalent network\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: [\n                                \"Dust irritant\"\n                            ]\n                        },\n                        uses: [\n                            \"Glass\",\n                            \"Electronics\"\n                        ]\n                    },\n                    {\n                        formula: \"Al2O3\",\n                        name: \"Aluminum Oxide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Abrasives\",\n                            \"Ceramics\"\n                        ]\n                    },\n                    {\n                        formula: \"Fe2O3\",\n                        name: \"Iron(III) Oxide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"red-brown\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Pigment\",\n                            \"Iron production\"\n                        ]\n                    },\n                    {\n                        formula: \"CuO\",\n                        name: \"Copper(II) Oxide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"black\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Ceramics\",\n                            \"Catalysts\"\n                        ]\n                    },\n                    {\n                        formula: \"ZnO\",\n                        name: \"Zinc Oxide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Sunscreen\",\n                            \"Rubber\"\n                        ]\n                    },\n                    {\n                        formula: \"MgO\",\n                        name: \"Magnesium Oxide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Refractory\",\n                            \"Antacid\"\n                        ]\n                    },\n                    {\n                        formula: \"CaO\",\n                        name: \"Calcium Oxide\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Caustic\",\n                                \"Reacts violently with water\"\n                            ]\n                        },\n                        uses: [\n                            \"Cement\",\n                            \"Steel production\"\n                        ]\n                    }\n                ],\n                hydrides: [\n                    {\n                        formula: \"LiH\",\n                        name: \"Lithium Hydride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Reacts violently with water\"\n                            ]\n                        },\n                        uses: [\n                            \"Reducing agent\"\n                        ]\n                    },\n                    {\n                        formula: \"NaH\",\n                        name: \"Sodium Hydride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Reacts violently with water\"\n                            ]\n                        },\n                        uses: [\n                            \"Reducing agent\"\n                        ]\n                    },\n                    {\n                        formula: \"CaH2\",\n                        name: \"Calcium Hydride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Reacts with water\"\n                            ]\n                        },\n                        uses: [\n                            \"Desiccant\",\n                            \"Hydrogen source\"\n                        ]\n                    }\n                ],\n                acids: [\n                    {\n                        formula: \"HCl\",\n                        name: \"Hydrogen Chloride\",\n                        properties: {\n                            state: \"gas\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Corrosive\",\n                                \"Toxic vapors\"\n                            ]\n                        },\n                        uses: [\n                            \"Industrial acid\",\n                            \"Chemical synthesis\"\n                        ]\n                    },\n                    {\n                        formula: \"HF\",\n                        name: \"Hydrogen Fluoride\",\n                        properties: {\n                            state: \"liquid\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"very high\",\n                            warnings: [\n                                \"Extremely corrosive\",\n                                \"Burns skin and bones\"\n                            ]\n                        },\n                        uses: [\n                            \"Etching\",\n                            \"Industrial processes\"\n                        ]\n                    },\n                    {\n                        formula: \"HBr\",\n                        name: \"Hydrogen Bromide\",\n                        properties: {\n                            state: \"gas\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Corrosive\",\n                                \"Toxic\"\n                            ]\n                        },\n                        uses: [\n                            \"Chemical synthesis\"\n                        ]\n                    },\n                    {\n                        formula: \"HI\",\n                        name: \"Hydrogen Iodide\",\n                        properties: {\n                            state: \"gas\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Corrosive\",\n                                \"Toxic\"\n                            ]\n                        },\n                        uses: [\n                            \"Chemical synthesis\"\n                        ]\n                    },\n                    {\n                        formula: \"H2S\",\n                        name: \"Hydrogen Sulfide\",\n                        properties: {\n                            state: \"gas\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"very high\",\n                            warnings: [\n                                \"Extremely toxic\",\n                                \"Rotten egg odor\"\n                            ]\n                        },\n                        uses: [\n                            \"Industrial processes\"\n                        ]\n                    },\n                    {\n                        formula: \"H2SO4\",\n                        name: \"Sulfuric Acid\",\n                        properties: {\n                            state: \"liquid\",\n                            type: \"molecular compound\",\n                            color: \"colorless\",\n                            density: \"1.84 g/cm\\xb3\"\n                        },\n                        safety_data: {\n                            hazard_level: \"very high\",\n                            warnings: [\n                                \"Extremely corrosive\",\n                                \"Causes severe burns\",\n                                \"Reacts violently with water\"\n                            ]\n                        },\n                        uses: [\n                            \"Industrial acid\",\n                            \"Battery acid\",\n                            \"Chemical synthesis\"\n                        ]\n                    },\n                    {\n                        formula: \"H2SO3\",\n                        name: \"Sulfurous Acid\",\n                        properties: {\n                            state: \"aqueous solution\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Corrosive\",\n                                \"Irritant\"\n                            ]\n                        },\n                        uses: [\n                            \"Food preservative\",\n                            \"Bleaching agent\"\n                        ]\n                    },\n                    {\n                        formula: \"HNO3\",\n                        name: \"Nitric Acid\",\n                        properties: {\n                            state: \"liquid\",\n                            type: \"molecular compound\",\n                            color: \"colorless to yellow\"\n                        },\n                        safety_data: {\n                            hazard_level: \"very high\",\n                            warnings: [\n                                \"Extremely corrosive\",\n                                \"Strong oxidizer\",\n                                \"Toxic vapors\"\n                            ]\n                        },\n                        uses: [\n                            \"Fertilizer production\",\n                            \"Explosives\",\n                            \"Metal etching\"\n                        ]\n                    },\n                    {\n                        formula: \"H3PO4\",\n                        name: \"Phosphoric Acid\",\n                        properties: {\n                            state: \"liquid\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"medium\",\n                            warnings: [\n                                \"Corrosive\",\n                                \"Irritant\"\n                            ]\n                        },\n                        uses: [\n                            \"Food additive\",\n                            \"Fertilizer\",\n                            \"Soft drinks\"\n                        ]\n                    },\n                    {\n                        formula: \"H2CO3\",\n                        name: \"Carbonic Acid\",\n                        properties: {\n                            state: \"aqueous solution\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: [\n                                \"Mild irritant\"\n                            ]\n                        },\n                        uses: [\n                            \"Carbonated beverages\",\n                            \"pH buffering\"\n                        ]\n                    }\n                ],\n                organic_compounds: [\n                    {\n                        formula: \"CH4\",\n                        name: \"Methane\",\n                        properties: {\n                            state: \"gas\",\n                            type: \"organic compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"medium\",\n                            warnings: [\n                                \"Flammable\",\n                                \"Asphyxiant\"\n                            ]\n                        },\n                        uses: [\n                            \"Natural gas\",\n                            \"Fuel\"\n                        ]\n                    },\n                    {\n                        formula: \"NH3\",\n                        name: \"Ammonia\",\n                        properties: {\n                            state: \"gas\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Toxic\",\n                                \"Corrosive\",\n                                \"Irritant\"\n                            ]\n                        },\n                        uses: [\n                            \"Fertilizer\",\n                            \"Cleaning agent\"\n                        ]\n                    },\n                    {\n                        formula: \"CO2\",\n                        name: \"Carbon Dioxide\",\n                        properties: {\n                            state: \"gas\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"low\",\n                            warnings: [\n                                \"Asphyxiant in high concentrations\"\n                            ]\n                        },\n                        uses: [\n                            \"Fire extinguishers\",\n                            \"Carbonated drinks\",\n                            \"Photosynthesis\"\n                        ]\n                    },\n                    {\n                        formula: \"SO2\",\n                        name: \"Sulfur Dioxide\",\n                        properties: {\n                            state: \"gas\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Toxic vapors\",\n                                \"Respiratory irritant\",\n                                \"Environmental pollutant\"\n                            ]\n                        },\n                        uses: [\n                            \"Food preservative\",\n                            \"Wine making\",\n                            \"Paper bleaching\"\n                        ]\n                    },\n                    {\n                        formula: \"NO2\",\n                        name: \"Nitrogen Dioxide\",\n                        properties: {\n                            state: \"gas\",\n                            type: \"molecular compound\",\n                            color: \"reddish-brown\"\n                        },\n                        safety_data: {\n                            hazard_level: \"very high\",\n                            warnings: [\n                                \"Highly toxic\",\n                                \"Strong oxidizer\",\n                                \"Respiratory damage\"\n                            ]\n                        },\n                        uses: [\n                            \"Nitric acid production\",\n                            \"Chemical synthesis\"\n                        ]\n                    },\n                    {\n                        formula: \"NaHCO3\",\n                        name: \"Sodium Bicarbonate\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"very low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Baking soda\",\n                            \"Antacid\",\n                            \"Cleaning agent\",\n                            \"Fire extinguisher\"\n                        ]\n                    },\n                    {\n                        formula: \"CaCO3\",\n                        name: \"Calcium Carbonate\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"ionic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"very low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Limestone\",\n                            \"Marble\",\n                            \"Antacid\",\n                            \"Construction material\"\n                        ]\n                    },\n                    {\n                        formula: \"C2H6O\",\n                        name: \"Ethanol\",\n                        properties: {\n                            state: \"liquid\",\n                            type: \"organic compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"medium\",\n                            warnings: [\n                                \"Flammable\",\n                                \"Intoxicating\"\n                            ]\n                        },\n                        uses: [\n                            \"Alcoholic beverages\",\n                            \"Fuel additive\",\n                            \"Antiseptic\",\n                            \"Solvent\"\n                        ]\n                    },\n                    {\n                        formula: \"C6H12O6\",\n                        name: \"Glucose\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"organic compound\",\n                            color: \"white\"\n                        },\n                        safety_data: {\n                            hazard_level: \"very low\",\n                            warnings: []\n                        },\n                        uses: [\n                            \"Food sweetener\",\n                            \"Energy source\",\n                            \"Medical solutions\",\n                            \"Fermentation\"\n                        ]\n                    }\n                ],\n                noble_gas_compounds: [\n                    {\n                        formula: \"XeF4\",\n                        name: \"Xenon Tetrafluoride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Highly reactive\",\n                                \"Toxic\"\n                            ]\n                        },\n                        uses: [\n                            \"Research\",\n                            \"Fluorinating agent\"\n                        ]\n                    },\n                    {\n                        formula: \"KrF2\",\n                        name: \"Krypton Difluoride\",\n                        properties: {\n                            state: \"solid\",\n                            type: \"molecular compound\",\n                            color: \"colorless\"\n                        },\n                        safety_data: {\n                            hazard_level: \"high\",\n                            warnings: [\n                                \"Highly reactive\",\n                                \"Unstable\"\n                            ]\n                        },\n                        uses: [\n                            \"Research\"\n                        ]\n                    }\n                ]\n            }\n        };\n    }\n    async predictCompoundWithCounts(elements) {\n        const sortedElements = elements.sort((a, b)=>a.symbol.localeCompare(b.symbol));\n        const cacheKey = sortedElements.map((e)=>\"\".concat(e.symbol).concat(e.count > 1 ? e.count : \"\")).join(\"-\");\n        // Check cache first\n        if (this.cache.has(cacheKey)) {\n            return this.cache.get(cacheKey);\n        }\n        // Generate possible formulas based on element counts\n        const formula = this.generateFormulaFromCounts(elements);\n        // First, check if this exact formula exists in our database\n        const exactMatch = this.searchDatabaseByFormula(formula);\n        if (exactMatch) {\n            const result = {\n                ...exactMatch,\n                source: \"database\",\n                confidence: 1.0\n            };\n            this.cache.set(cacheKey, result);\n            return result;\n        }\n        // Apply chemistry rules considering stoichiometry\n        const rulesResult = this.applyChemistryRulesWithCounts(elements);\n        if (rulesResult.confidence > 0.8) {\n            this.cache.set(cacheKey, rulesResult);\n            return rulesResult;\n        }\n        // Try ML prediction with counts\n        const mlResult = this.runMLModelWithCounts(elements);\n        if (mlResult.confidence > 0.6) {\n            this.cache.set(cacheKey, mlResult);\n            return mlResult;\n        }\n        // No reaction predicted\n        const noReaction = {\n            will_react: false,\n            confidence: 0.85,\n            source: \"rules_engine\",\n            reason: \"No favorable reaction conditions found for this stoichiometry\",\n            note: \"Consider different element ratios\"\n        };\n        this.cache.set(cacheKey, noReaction);\n        return noReaction;\n    }\n    generateFormulaFromCounts(elements) {\n        return elements.sort((a, b)=>{\n            // Sort by electronegativity order for proper chemical formula\n            const orderMap = {\n                \"H\": 1,\n                \"Li\": 2,\n                \"Be\": 3,\n                \"B\": 4,\n                \"C\": 5,\n                \"N\": 6,\n                \"O\": 7,\n                \"F\": 8,\n                \"Na\": 9,\n                \"Mg\": 10,\n                \"Al\": 11,\n                \"Si\": 12,\n                \"P\": 13,\n                \"S\": 14,\n                \"Cl\": 15,\n                \"K\": 16,\n                \"Ca\": 17,\n                \"Br\": 18,\n                \"I\": 19\n            };\n            return (orderMap[a.symbol] || 20) - (orderMap[b.symbol] || 20);\n        }).map((e)=>e.count === 1 ? e.symbol : \"\".concat(e.symbol).concat(e.count)).join(\"\");\n    }\n    searchDatabaseByFormula(formula) {\n        var _this_database;\n        if (!((_this_database = this.database) === null || _this_database === void 0 ? void 0 : _this_database.compounds)) return null;\n        // Search through all compound categories\n        const categories = [\n            \"binary_halides\",\n            \"binary_oxides\",\n            \"hydrides\",\n            \"hydroxides\",\n            \"acids\",\n            \"salts\",\n            \"noble_gas_compounds\",\n            \"organic_compounds\"\n        ];\n        for (const category of categories){\n            const compounds = this.database.compounds[category];\n            if (!compounds) continue;\n            const found = compounds.find((compound)=>compound.formula === formula || compound.formula === this.normalizeFormula(formula) || this.formulasAreEquivalent(compound.formula, formula));\n            if (found) {\n                return {\n                    will_react: true,\n                    formula: found.formula,\n                    name: found.name,\n                    properties: found.properties,\n                    safety: found.safety_data,\n                    uses: found.uses\n                };\n            }\n        }\n        return null;\n    }\n    normalizeFormula(formula) {\n        // Handle common formula variations (e.g., H2O vs OH2)\n        if (formula === \"H2O\" || formula === \"OH2\") return \"H2O\";\n        if (formula === \"HO\" || formula === \"OH\") return \"OH\";\n        return formula;\n    }\n    formulasAreEquivalent(formula1, formula2) {\n        // More sophisticated formula comparison\n        return this.normalizeFormula(formula1) === this.normalizeFormula(formula2);\n    }\n    applyChemistryRulesWithCounts(elements) {\n        const formula = this.generateFormulaFromCounts(elements);\n        // Special case: H2O (water)\n        if (formula === \"H2O\") {\n            return {\n                will_react: true,\n                confidence: 1.0,\n                formula: \"H2O\",\n                name: \"water\",\n                properties: {\n                    state: \"liquid\",\n                    type: \"molecular compound\",\n                    color: \"colorless\",\n                    melting_point: \"0\\xb0C\",\n                    boiling_point: \"100\\xb0C\"\n                },\n                safety: {\n                    hazard_level: \"none\",\n                    warnings: []\n                },\n                uses: [\n                    \"Universal solvent\",\n                    \"Essential for life\",\n                    \"Chemical reactions\"\n                ],\n                source: \"rules_engine\",\n                rule_applied: \"R004 - Hydrogen compounds with oxygen\",\n                warnings: []\n            };\n        }\n        // Special case: OH (hydroxide ion)\n        if (formula === \"HO\" || formula === \"OH\") {\n            return {\n                will_react: true,\n                confidence: 0.95,\n                formula: \"OH\",\n                name: \"hydroxide\",\n                properties: {\n                    state: \"ion\",\n                    type: \"ionic\",\n                    color: \"colorless\"\n                },\n                safety: {\n                    hazard_level: \"medium\",\n                    warnings: [\n                        \"Basic/alkaline\",\n                        \"Can cause burns\"\n                    ]\n                },\n                uses: [\n                    \"Chemical synthesis\",\n                    \"pH adjustment\"\n                ],\n                source: \"rules_engine\",\n                rule_applied: \"R004 - Hydrogen-oxygen compounds\",\n                warnings: [\n                    \"This is typically found as part of ionic compounds like NaOH\"\n                ]\n            };\n        }\n        // Handle ternary and higher compounds (3+ elements)\n        if (elements.length >= 3) {\n            return this.handleMultiElementCompounds(elements, formula);\n        }\n        // Handle binary ionic compounds (Metal + Nonmetal)\n        if (elements.length === 2) {\n            const [el1, el2] = elements;\n            // Check for alkali metal + halogen (like NaCl, KBr, etc.)\n            if (this.isAlkaliMetal(el1.symbol) && this.isHalogen(el2.symbol)) {\n                return {\n                    will_react: true,\n                    confidence: 1.0,\n                    formula,\n                    name: this.getCompoundName(el1.symbol, el2.symbol),\n                    properties: {\n                        state: \"solid\",\n                        type: \"ionic compound\",\n                        color: \"white\"\n                    },\n                    safety: {\n                        hazard_level: \"low\",\n                        warnings: []\n                    },\n                    uses: [\n                        \"Industrial applications\",\n                        \"Chemical synthesis\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R001 - Alkali metal + Halogen → Ionic salt\",\n                    warnings: []\n                };\n            }\n            // Check for alkaline earth metal + halogen\n            if (this.isAlkalineEarthMetal(el1.symbol) && this.isHalogen(el2.symbol)) {\n                const expectedFormula = this.getAlkalineEarthHalideFormula(el1.symbol, el2.symbol);\n                return {\n                    will_react: true,\n                    confidence: 1.0,\n                    formula: expectedFormula,\n                    name: this.getCompoundName(el1.symbol, el2.symbol),\n                    properties: {\n                        state: \"solid\",\n                        type: \"ionic compound\",\n                        color: \"white\"\n                    },\n                    safety: {\n                        hazard_level: \"low\",\n                        warnings: []\n                    },\n                    uses: [\n                        \"Industrial applications\",\n                        \"Chemical synthesis\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R002 - Alkaline earth metal + Halogen → Ionic salt\",\n                    warnings: []\n                };\n            }\n            // Apply existing binary rules for other combinations\n            return this.applyChemistryRules(elements[0].symbol, elements[1].symbol);\n        }\n        return {\n            will_react: false,\n            confidence: 0.3,\n            source: \"rules_engine\",\n            reason: \"No specific rules for this combination\"\n        };\n    }\n    runMLModelWithCounts(elements) {\n        // Enhanced ML simulation considering stoichiometry\n        const formula = this.generateFormulaFromCounts(elements);\n        // Simulate ML prediction with some chemical knowledge\n        if (elements.length === 2) {\n            const [el1, el2] = elements;\n            // Metal + Non-metal patterns\n            if (this.isMetal(el1.symbol) && this.isNonmetal(el2.symbol)) {\n                return {\n                    will_react: true,\n                    confidence: 0.85,\n                    formula,\n                    name: \"\".concat(el1.symbol.toLowerCase(), \"-\").concat(el2.symbol.toLowerCase(), \" compound\"),\n                    properties: {\n                        type: \"ionic compound\",\n                        state: \"solid\"\n                    },\n                    source: \"ml_model\",\n                    warnings: []\n                };\n            }\n        }\n        return {\n            will_react: false,\n            confidence: 0.4,\n            source: \"ml_model\",\n            reason: \"ML model suggests low reaction probability\"\n        };\n    }\n    getCompoundName(metal, nonmetal) {\n        const metalNames = {\n            \"Li\": \"lithium\",\n            \"Na\": \"sodium\",\n            \"K\": \"potassium\",\n            \"Rb\": \"rubidium\",\n            \"Cs\": \"cesium\",\n            \"Be\": \"beryllium\",\n            \"Mg\": \"magnesium\",\n            \"Ca\": \"calcium\",\n            \"Sr\": \"strontium\",\n            \"Ba\": \"barium\"\n        };\n        const nonmetalNames = {\n            \"F\": \"fluoride\",\n            \"Cl\": \"chloride\",\n            \"Br\": \"bromide\",\n            \"I\": \"iodide\"\n        };\n        const metalName = metalNames[metal] || metal.toLowerCase();\n        const nonmetalName = nonmetalNames[nonmetal] || nonmetal.toLowerCase();\n        return \"\".concat(metalName, \" \").concat(nonmetalName);\n    }\n    getAlkalineEarthHalideFormula(metal, halogen) {\n        // Alkaline earth metals have +2 charge, halogens have -1 charge\n        // So formula is MX2 (e.g., CaCl2, MgF2)\n        return \"\".concat(metal).concat(halogen, \"2\");\n    }\n    isTransitionMetal(symbol) {\n        const transitionMetals = [\n            \"Sc\",\n            \"Ti\",\n            \"V\",\n            \"Cr\",\n            \"Mn\",\n            \"Fe\",\n            \"Co\",\n            \"Ni\",\n            \"Cu\",\n            \"Zn\",\n            \"Y\",\n            \"Zr\",\n            \"Nb\",\n            \"Mo\",\n            \"Tc\",\n            \"Ru\",\n            \"Rh\",\n            \"Pd\",\n            \"Ag\",\n            \"Cd\",\n            \"Au\",\n            \"Pt\",\n            \"Hg\"\n        ];\n        return transitionMetals.includes(symbol);\n    }\n    getTransitionMetalHalideFormula(metal, halogen) {\n        var _commonFormulas_metal;\n        // Most common oxidation state formulas for transition metals with halogens\n        const commonFormulas = {\n            \"Fe\": {\n                \"Cl\": \"FeCl2\",\n                \"F\": \"FeF2\",\n                \"Br\": \"FeBr2\",\n                \"I\": \"FeI2\"\n            },\n            \"Cu\": {\n                \"Cl\": \"CuCl\",\n                \"F\": \"CuF\",\n                \"Br\": \"CuBr\",\n                \"I\": \"CuI\"\n            },\n            \"Zn\": {\n                \"Cl\": \"ZnCl2\",\n                \"F\": \"ZnF2\",\n                \"Br\": \"ZnBr2\",\n                \"I\": \"ZnI2\"\n            },\n            \"Ag\": {\n                \"Cl\": \"AgCl\",\n                \"F\": \"AgF\",\n                \"Br\": \"AgBr\",\n                \"I\": \"AgI\"\n            },\n            \"Au\": {\n                \"Cl\": \"AuCl3\",\n                \"F\": \"AuF3\",\n                \"Br\": \"AuBr3\",\n                \"I\": \"AuI3\"\n            }\n        };\n        return ((_commonFormulas_metal = commonFormulas[metal]) === null || _commonFormulas_metal === void 0 ? void 0 : _commonFormulas_metal[halogen]) || \"\".concat(metal).concat(halogen, \"2\");\n    }\n    getTransitionMetalColor(metal, halogen) {\n        var _colors_metal;\n        const colors = {\n            \"Fe\": {\n                \"Cl\": \"green\",\n                \"F\": \"pale green\",\n                \"Br\": \"yellow-brown\",\n                \"I\": \"dark brown\"\n            },\n            \"Cu\": {\n                \"Cl\": \"white\",\n                \"F\": \"white\",\n                \"Br\": \"white\",\n                \"I\": \"white\"\n            },\n            \"Zn\": {\n                \"Cl\": \"white\",\n                \"F\": \"white\",\n                \"Br\": \"white\",\n                \"I\": \"white\"\n            },\n            \"Ag\": {\n                \"Cl\": \"white\",\n                \"F\": \"yellow\",\n                \"Br\": \"pale yellow\",\n                \"I\": \"yellow\"\n            },\n            \"Au\": {\n                \"Cl\": \"red\",\n                \"F\": \"orange\",\n                \"Br\": \"dark red\",\n                \"I\": \"dark green\"\n            }\n        };\n        return ((_colors_metal = colors[metal]) === null || _colors_metal === void 0 ? void 0 : _colors_metal[halogen]) || \"colored\";\n    }\n    getMetalSulfideFormula(metal) {\n        // Common metal sulfide formulas\n        const sulfideFormulas = {\n            \"Na\": \"Na2S\",\n            \"K\": \"K2S\",\n            \"Li\": \"Li2S\",\n            \"Rb\": \"Rb2S\",\n            \"Cs\": \"Cs2S\",\n            \"Mg\": \"MgS\",\n            \"Ca\": \"CaS\",\n            \"Sr\": \"SrS\",\n            \"Ba\": \"BaS\",\n            \"Al\": \"Al2S3\",\n            \"Fe\": \"FeS\",\n            \"Cu\": \"CuS\",\n            \"Zn\": \"ZnS\",\n            \"Pb\": \"PbS\"\n        };\n        return sulfideFormulas[metal] || \"\".concat(metal, \"S\");\n    }\n    getSulfideColor(metal) {\n        const sulfideColors = {\n            \"Na\": \"white\",\n            \"K\": \"white\",\n            \"Li\": \"white\",\n            \"Mg\": \"white\",\n            \"Ca\": \"white\",\n            \"Al\": \"yellow\",\n            \"Fe\": \"black\",\n            \"Cu\": \"black\",\n            \"Zn\": \"white\",\n            \"Pb\": \"black\"\n        };\n        return sulfideColors[metal] || \"dark\";\n    }\n    getOxideColor(metal) {\n        const oxideColors = {\n            \"Na\": \"white\",\n            \"K\": \"white\",\n            \"Li\": \"white\",\n            \"Mg\": \"white\",\n            \"Ca\": \"white\",\n            \"Al\": \"white\",\n            \"Fe\": \"red-brown\",\n            \"Cu\": \"black\",\n            \"Zn\": \"white\"\n        };\n        return oxideColors[metal] || \"white\";\n    }\n    getHalideNames() {\n        return {\n            \"F\": \"fluoride\",\n            \"Cl\": \"chloride\",\n            \"Br\": \"bromide\",\n            \"I\": \"iodide\"\n        };\n    }\n    getTransitionMetalOxideColor(metal) {\n        // Common colors for transition metal oxides\n        const colorMap = {\n            \"Fe\": \"red-brown\",\n            \"Cu\": \"black to red\",\n            \"Cr\": \"green\",\n            \"Mn\": \"brown-black\",\n            \"Co\": \"black\",\n            \"Ni\": \"green-black\",\n            \"Ti\": \"white\",\n            \"V\": \"yellow-orange\",\n            \"Zn\": \"white\",\n            \"Ag\": \"black-brown\",\n            \"Au\": \"purple-brown\",\n            \"Pt\": \"brown-black\",\n            \"Pd\": \"black\",\n            \"Rh\": \"gray\",\n            \"Ir\": \"blue-black\",\n            \"Os\": \"brown\",\n            \"Ru\": \"blue-black\",\n            \"Sc\": \"white\",\n            \"Y\": \"white\",\n            \"La\": \"white\",\n            \"Ce\": \"pale yellow\",\n            \"Hf\": \"white\",\n            \"Ta\": \"white\",\n            \"W\": \"yellow\",\n            \"Re\": \"blue-black\" // Rhenium oxide\n        };\n        return colorMap[metal] || \"colored\";\n    }\n    getOxideSafety(metal) {\n        const dangerousOxides = [\n            \"Na\",\n            \"K\",\n            \"Li\",\n            \"Ca\",\n            \"Ba\"\n        ];\n        return dangerousOxides.includes(metal) ? \"high\" : \"low\";\n    }\n    getOxideWarnings(metal) {\n        const dangerousOxides = [\n            \"Na\",\n            \"K\",\n            \"Li\",\n            \"Ca\",\n            \"Ba\"\n        ];\n        return dangerousOxides.includes(metal) ? [\n            \"Reacts violently with water\",\n            \"Caustic\",\n            \"Can cause burns\"\n        ] : [];\n    }\n    getHydrogenHalideName(halogen) {\n        const names = {\n            \"F\": \"hydrogen fluoride\",\n            \"Cl\": \"hydrogen chloride\",\n            \"Br\": \"hydrogen bromide\",\n            \"I\": \"hydrogen iodide\"\n        };\n        return names[halogen] || \"hydrogen \".concat(halogen.toLowerCase(), \"ide\");\n    }\n    handleMultiElementCompounds(elements, formula) {\n        // Sort elements for pattern matching\n        const elementSymbols = elements.map((e)=>e.symbol).sort();\n        const elementCounts = elements.reduce((acc, e)=>({\n                ...acc,\n                [e.symbol]: e.count\n            }), {});\n        // H2SO4 pattern: Hydrogen + Sulfur + Oxygen\n        if (elementSymbols.includes(\"H\") && elementSymbols.includes(\"S\") && elementSymbols.includes(\"O\")) {\n            if (elementCounts[\"H\"] === 2 && elementCounts[\"S\"] === 1 && elementCounts[\"O\"] === 4) {\n                return {\n                    will_react: true,\n                    confidence: 1.0,\n                    formula: \"H2SO4\",\n                    name: \"sulfuric acid\",\n                    properties: {\n                        state: \"liquid\",\n                        type: \"molecular compound\",\n                        color: \"colorless\",\n                        density: \"1.84 g/cm\\xb3\",\n                        boiling_point: \"337\\xb0C\"\n                    },\n                    safety: {\n                        hazard_level: \"very high\",\n                        warnings: [\n                            \"Extremely corrosive\",\n                            \"Causes severe burns\",\n                            \"Reacts violently with water\",\n                            \"Toxic vapors\"\n                        ]\n                    },\n                    uses: [\n                        \"Industrial acid\",\n                        \"Battery acid\",\n                        \"Chemical synthesis\",\n                        \"Fertilizer production\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R014 - Hydrogen + Sulfur + Oxygen → Sulfuric Acid\",\n                    warnings: [\n                        \"Extremely dangerous - handle with extreme care\",\n                        \"Always add acid to water, never water to acid\"\n                    ]\n                };\n            }\n            // H2SO3 pattern: Sulfurous acid\n            if (elementCounts[\"H\"] === 2 && elementCounts[\"S\"] === 1 && elementCounts[\"O\"] === 3) {\n                return {\n                    will_react: true,\n                    confidence: 0.9,\n                    formula: \"H2SO3\",\n                    name: \"sulfurous acid\",\n                    properties: {\n                        state: \"aqueous solution\",\n                        type: \"molecular compound\",\n                        color: \"colorless\"\n                    },\n                    safety: {\n                        hazard_level: \"high\",\n                        warnings: [\n                            \"Corrosive\",\n                            \"Irritant\",\n                            \"Toxic vapors\"\n                        ]\n                    },\n                    uses: [\n                        \"Food preservative\",\n                        \"Bleaching agent\",\n                        \"Chemical synthesis\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R015 - Hydrogen + Sulfur + Oxygen → Sulfurous Acid\",\n                    warnings: [\n                        \"Corrosive to metals and organic matter\"\n                    ]\n                };\n            }\n        }\n        // HNO3 pattern: Hydrogen + Nitrogen + Oxygen\n        if (elementSymbols.includes(\"H\") && elementSymbols.includes(\"N\") && elementSymbols.includes(\"O\")) {\n            if (elementCounts[\"H\"] === 1 && elementCounts[\"N\"] === 1 && elementCounts[\"O\"] === 3) {\n                return {\n                    will_react: true,\n                    confidence: 1.0,\n                    formula: \"HNO3\",\n                    name: \"nitric acid\",\n                    properties: {\n                        state: \"liquid\",\n                        type: \"molecular compound\",\n                        color: \"colorless to yellow\",\n                        density: \"1.41 g/cm\\xb3\"\n                    },\n                    safety: {\n                        hazard_level: \"very high\",\n                        warnings: [\n                            \"Extremely corrosive\",\n                            \"Strong oxidizer\",\n                            \"Toxic vapors\",\n                            \"Causes severe burns\"\n                        ]\n                    },\n                    uses: [\n                        \"Fertilizer production\",\n                        \"Explosives\",\n                        \"Metal etching\",\n                        \"Chemical synthesis\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R016 - Hydrogen + Nitrogen + Oxygen → Nitric Acid\",\n                    warnings: [\n                        \"Extremely dangerous oxidizing acid\",\n                        \"Reacts violently with organic matter\"\n                    ]\n                };\n            }\n        }\n        // H3PO4 pattern: Hydrogen + Phosphorus + Oxygen\n        if (elementSymbols.includes(\"H\") && elementSymbols.includes(\"P\") && elementSymbols.includes(\"O\")) {\n            if (elementCounts[\"H\"] === 3 && elementCounts[\"P\"] === 1 && elementCounts[\"O\"] === 4) {\n                return {\n                    will_react: true,\n                    confidence: 1.0,\n                    formula: \"H3PO4\",\n                    name: \"phosphoric acid\",\n                    properties: {\n                        state: \"liquid\",\n                        type: \"molecular compound\",\n                        color: \"colorless\",\n                        density: \"1.87 g/cm\\xb3\"\n                    },\n                    safety: {\n                        hazard_level: \"medium\",\n                        warnings: [\n                            \"Corrosive\",\n                            \"Irritant to skin and eyes\"\n                        ]\n                    },\n                    uses: [\n                        \"Food additive\",\n                        \"Fertilizer\",\n                        \"Rust removal\",\n                        \"Soft drinks\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R017 - Hydrogen + Phosphorus + Oxygen → Phosphoric Acid\",\n                    warnings: [\n                        \"Moderately corrosive\"\n                    ]\n                };\n            }\n        }\n        // NaOH pattern: Metal + Oxygen + Hydrogen (hydroxides)\n        if (elementSymbols.includes(\"H\") && elementSymbols.includes(\"O\")) {\n            const metals = elements.filter((e)=>this.isMetal(e.symbol));\n            if (metals.length === 1 && elementCounts[\"H\"] === 1 && elementCounts[\"O\"] === 1) {\n                var _this_elements_get;\n                const metal = metals[0].symbol;\n                return {\n                    will_react: true,\n                    confidence: 0.95,\n                    formula: \"\".concat(metal, \"OH\"),\n                    name: \"\".concat((_this_elements_get = this.elements.get(metal)) === null || _this_elements_get === void 0 ? void 0 : _this_elements_get.name.toLowerCase(), \" hydroxide\"),\n                    properties: {\n                        state: \"solid\",\n                        type: \"ionic compound\",\n                        color: \"white\"\n                    },\n                    safety: {\n                        hazard_level: \"high\",\n                        warnings: [\n                            \"Caustic\",\n                            \"Corrosive\",\n                            \"Can cause severe burns\"\n                        ]\n                    },\n                    uses: [\n                        \"Industrial base\",\n                        \"Soap making\",\n                        \"Chemical synthesis\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R018 - Metal + Oxygen + Hydrogen → Metal Hydroxide\",\n                    warnings: [\n                        \"Highly caustic - causes chemical burns\"\n                    ]\n                };\n            }\n        }\n        // CaCO3 pattern: Metal + Carbon + Oxygen (carbonates)\n        if (elementSymbols.includes(\"C\") && elementSymbols.includes(\"O\")) {\n            const metals = elements.filter((e)=>this.isMetal(e.symbol));\n            if (metals.length === 1 && elementCounts[\"C\"] === 1 && elementCounts[\"O\"] === 3) {\n                var _this_elements_get1;\n                const metal = metals[0].symbol;\n                const metalName = (_this_elements_get1 = this.elements.get(metal)) === null || _this_elements_get1 === void 0 ? void 0 : _this_elements_get1.name.toLowerCase();\n                return {\n                    will_react: true,\n                    confidence: 0.9,\n                    formula: \"\".concat(metal, \"CO3\"),\n                    name: \"\".concat(metalName, \" carbonate\"),\n                    properties: {\n                        state: \"solid\",\n                        type: \"ionic compound\",\n                        color: \"white\"\n                    },\n                    safety: {\n                        hazard_level: \"low\",\n                        warnings: []\n                    },\n                    uses: [\n                        \"Construction material\",\n                        \"Antacid\",\n                        \"Industrial applications\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R019 - Metal + Carbon + Oxygen → Metal Carbonate\",\n                    warnings: []\n                };\n            }\n        }\n        // H2CO3 pattern: Hydrogen + Carbon + Oxygen (Carbonic Acid)\n        if (elementSymbols.includes(\"H\") && elementSymbols.includes(\"C\") && elementSymbols.includes(\"O\")) {\n            if (elementCounts[\"H\"] === 2 && elementCounts[\"C\"] === 1 && elementCounts[\"O\"] === 3) {\n                return {\n                    will_react: true,\n                    confidence: 0.9,\n                    formula: \"H2CO3\",\n                    name: \"carbonic acid\",\n                    properties: {\n                        state: \"aqueous solution\",\n                        type: \"molecular compound\",\n                        color: \"colorless\",\n                        stability: \"unstable in pure form\"\n                    },\n                    safety: {\n                        hazard_level: \"low\",\n                        warnings: [\n                            \"Mild irritant\"\n                        ]\n                    },\n                    uses: [\n                        \"Carbonated beverages\",\n                        \"pH buffering\",\n                        \"Natural processes\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R020 - Hydrogen + Carbon + Oxygen → Carbonic Acid\",\n                    warnings: [\n                        \"Decomposes easily to CO2 and H2O\"\n                    ]\n                };\n            }\n        }\n        // NH3 pattern: Nitrogen + Hydrogen (Ammonia)\n        if (elementSymbols.includes(\"N\") && elementSymbols.includes(\"H\") && elementSymbols.length === 2) {\n            if (elementCounts[\"N\"] === 1 && elementCounts[\"H\"] === 3) {\n                return {\n                    will_react: true,\n                    confidence: 1.0,\n                    formula: \"NH3\",\n                    name: \"ammonia\",\n                    properties: {\n                        state: \"gas\",\n                        type: \"molecular compound\",\n                        color: \"colorless\",\n                        odor: \"pungent\",\n                        boiling_point: \"-33.3\\xb0C\"\n                    },\n                    safety: {\n                        hazard_level: \"high\",\n                        warnings: [\n                            \"Toxic vapors\",\n                            \"Caustic\",\n                            \"Eye irritant\",\n                            \"Flammable\"\n                        ]\n                    },\n                    uses: [\n                        \"Fertilizer production\",\n                        \"Cleaning products\",\n                        \"Refrigeration\",\n                        \"Chemical synthesis\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R021 - Nitrogen + Hydrogen → Ammonia\",\n                    warnings: [\n                        \"Highly toxic - avoid inhalation\"\n                    ]\n                };\n            }\n        }\n        // CH4 pattern: Carbon + Hydrogen (Methane)\n        if (elementSymbols.includes(\"C\") && elementSymbols.includes(\"H\") && elementSymbols.length === 2) {\n            if (elementCounts[\"C\"] === 1 && elementCounts[\"H\"] === 4) {\n                return {\n                    will_react: true,\n                    confidence: 1.0,\n                    formula: \"CH4\",\n                    name: \"methane\",\n                    properties: {\n                        state: \"gas\",\n                        type: \"molecular compound\",\n                        color: \"colorless\",\n                        odor: \"odorless\",\n                        boiling_point: \"-161.5\\xb0C\"\n                    },\n                    safety: {\n                        hazard_level: \"medium\",\n                        warnings: [\n                            \"Highly flammable\",\n                            \"Asphyxiant\",\n                            \"Greenhouse gas\"\n                        ]\n                    },\n                    uses: [\n                        \"Natural gas fuel\",\n                        \"Heating\",\n                        \"Chemical feedstock\",\n                        \"Hydrogen production\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R022 - Carbon + Hydrogen → Methane\",\n                    warnings: [\n                        \"Extremely flammable - keep away from ignition sources\"\n                    ]\n                };\n            }\n        }\n        // CO2 pattern: Carbon + Oxygen (Carbon Dioxide)\n        if (elementSymbols.includes(\"C\") && elementSymbols.includes(\"O\") && elementSymbols.length === 2) {\n            if (elementCounts[\"C\"] === 1 && elementCounts[\"O\"] === 2) {\n                return {\n                    will_react: true,\n                    confidence: 1.0,\n                    formula: \"CO2\",\n                    name: \"carbon dioxide\",\n                    properties: {\n                        state: \"gas\",\n                        type: \"molecular compound\",\n                        color: \"colorless\",\n                        odor: \"odorless\",\n                        sublimation_point: \"-78.5\\xb0C\"\n                    },\n                    safety: {\n                        hazard_level: \"low\",\n                        warnings: [\n                            \"Asphyxiant in high concentrations\",\n                            \"Dry ice causes frostbite\"\n                        ]\n                    },\n                    uses: [\n                        \"Carbonated beverages\",\n                        \"Fire extinguishers\",\n                        \"Dry ice\",\n                        \"Photosynthesis\",\n                        \"Industrial processes\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R023 - Carbon + Oxygen → Carbon Dioxide\",\n                    warnings: [\n                        \"Can cause suffocation in enclosed spaces\"\n                    ]\n                };\n            }\n        }\n        // SO2 pattern: Sulfur + Oxygen (Sulfur Dioxide)\n        if (elementSymbols.includes(\"S\") && elementSymbols.includes(\"O\") && elementSymbols.length === 2) {\n            if (elementCounts[\"S\"] === 1 && elementCounts[\"O\"] === 2) {\n                return {\n                    will_react: true,\n                    confidence: 1.0,\n                    formula: \"SO2\",\n                    name: \"sulfur dioxide\",\n                    properties: {\n                        state: \"gas\",\n                        type: \"molecular compound\",\n                        color: \"colorless\",\n                        odor: \"sharp, irritating\",\n                        boiling_point: \"-10\\xb0C\"\n                    },\n                    safety: {\n                        hazard_level: \"high\",\n                        warnings: [\n                            \"Toxic vapors\",\n                            \"Respiratory irritant\",\n                            \"Environmental pollutant\",\n                            \"Causes acid rain\"\n                        ]\n                    },\n                    uses: [\n                        \"Food preservative\",\n                        \"Wine making\",\n                        \"Paper bleaching\",\n                        \"Chemical synthesis\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R024 - Sulfur + Oxygen → Sulfur Dioxide\",\n                    warnings: [\n                        \"Major air pollutant - toxic to humans and environment\"\n                    ]\n                };\n            }\n        }\n        // NO2 pattern: Nitrogen + Oxygen (Nitrogen Dioxide)\n        if (elementSymbols.includes(\"N\") && elementSymbols.includes(\"O\") && elementSymbols.length === 2) {\n            if (elementCounts[\"N\"] === 1 && elementCounts[\"O\"] === 2) {\n                return {\n                    will_react: true,\n                    confidence: 1.0,\n                    formula: \"NO2\",\n                    name: \"nitrogen dioxide\",\n                    properties: {\n                        state: \"gas\",\n                        type: \"molecular compound\",\n                        color: \"reddish-brown\",\n                        odor: \"sharp, acrid\",\n                        boiling_point: \"21.2\\xb0C\"\n                    },\n                    safety: {\n                        hazard_level: \"very high\",\n                        warnings: [\n                            \"Highly toxic\",\n                            \"Strong oxidizer\",\n                            \"Respiratory damage\",\n                            \"Environmental pollutant\"\n                        ]\n                    },\n                    uses: [\n                        \"Nitric acid production\",\n                        \"Rocket fuel oxidizer\",\n                        \"Chemical synthesis\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R025 - Nitrogen + Oxygen → Nitrogen Dioxide\",\n                    warnings: [\n                        \"Extremely toxic - can cause severe lung damage\"\n                    ]\n                };\n            }\n        }\n        // NaHCO3 pattern: Sodium + Hydrogen + Carbon + Oxygen (Sodium Bicarbonate)\n        if (elementSymbols.includes(\"Na\") && elementSymbols.includes(\"H\") && elementSymbols.includes(\"C\") && elementSymbols.includes(\"O\")) {\n            if (elementCounts[\"Na\"] === 1 && elementCounts[\"H\"] === 1 && elementCounts[\"C\"] === 1 && elementCounts[\"O\"] === 3) {\n                return {\n                    will_react: true,\n                    confidence: 1.0,\n                    formula: \"NaHCO3\",\n                    name: \"sodium bicarbonate\",\n                    properties: {\n                        state: \"solid\",\n                        type: \"ionic compound\",\n                        color: \"white\",\n                        crystal_structure: \"monoclinic\",\n                        solubility: \"soluble in water\"\n                    },\n                    safety: {\n                        hazard_level: \"very low\",\n                        warnings: []\n                    },\n                    uses: [\n                        \"Baking soda\",\n                        \"Antacid\",\n                        \"Fire extinguisher\",\n                        \"Cleaning agent\",\n                        \"Deodorizer\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R026 - Sodium + Hydrogen + Carbon + Oxygen → Sodium Bicarbonate\",\n                    warnings: []\n                };\n            }\n        }\n        // C2H6O pattern: Ethanol (2C + 6H + 1O)\n        if (elementSymbols.includes(\"C\") && elementSymbols.includes(\"H\") && elementSymbols.includes(\"O\") && elementSymbols.length === 3) {\n            if (elementCounts[\"C\"] === 2 && elementCounts[\"H\"] === 6 && elementCounts[\"O\"] === 1) {\n                return {\n                    will_react: true,\n                    confidence: 0.95,\n                    formula: \"C2H6O\",\n                    name: \"ethanol\",\n                    properties: {\n                        state: \"liquid\",\n                        type: \"molecular compound\",\n                        color: \"colorless\",\n                        odor: \"pleasant\",\n                        boiling_point: \"78.4\\xb0C\"\n                    },\n                    safety: {\n                        hazard_level: \"medium\",\n                        warnings: [\n                            \"Flammable\",\n                            \"Intoxicating\",\n                            \"Can cause drowsiness\"\n                        ]\n                    },\n                    uses: [\n                        \"Alcoholic beverages\",\n                        \"Fuel additive\",\n                        \"Antiseptic\",\n                        \"Solvent\",\n                        \"Chemical synthesis\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R027 - Carbon + Hydrogen + Oxygen → Ethanol\",\n                    warnings: [\n                        \"Highly flammable - keep away from heat sources\"\n                    ]\n                };\n            }\n        }\n        // C6H12O6 pattern: Glucose (6C + 12H + 6O)\n        if (elementSymbols.includes(\"C\") && elementSymbols.includes(\"H\") && elementSymbols.includes(\"O\") && elementSymbols.length === 3) {\n            if (elementCounts[\"C\"] === 6 && elementCounts[\"H\"] === 12 && elementCounts[\"O\"] === 6) {\n                return {\n                    will_react: true,\n                    confidence: 0.95,\n                    formula: \"C6H12O6\",\n                    name: \"glucose\",\n                    properties: {\n                        state: \"solid\",\n                        type: \"molecular compound\",\n                        color: \"white\",\n                        crystal_structure: \"crystalline\",\n                        solubility: \"highly soluble in water\"\n                    },\n                    safety: {\n                        hazard_level: \"very low\",\n                        warnings: []\n                    },\n                    uses: [\n                        \"Food sweetener\",\n                        \"Energy source\",\n                        \"Medical IV solutions\",\n                        \"Fermentation\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R028 - Carbon + Hydrogen + Oxygen → Glucose\",\n                    warnings: []\n                };\n            }\n        }\n        // Advanced Element Patterns - Covering all 118 elements\n        // Alkali Metal + Halogen + Oxygen (Metal Halates) - Li, Na, K, Rb, Cs, Fr + F, Cl, Br, I + O\n        const alkaliMetals = [\n            \"Li\",\n            \"Na\",\n            \"K\",\n            \"Rb\",\n            \"Cs\",\n            \"Fr\"\n        ];\n        const halogens = [\n            \"F\",\n            \"Cl\",\n            \"Br\",\n            \"I\"\n        ];\n        const alkaliMetal = elements.find((e)=>alkaliMetals.includes(e.symbol));\n        const halogen = elements.find((e)=>halogens.includes(e.symbol));\n        if (alkaliMetal && halogen && elementSymbols.includes(\"O\") && elementSymbols.length === 3) {\n            if (elementCounts[alkaliMetal.symbol] === 1 && elementCounts[halogen.symbol] === 1 && elementCounts[\"O\"] === 3) {\n                var _this_elements_get2;\n                const halogenName = halogen.symbol === \"F\" ? \"fluor\" : halogen.symbol === \"Cl\" ? \"chlor\" : halogen.symbol === \"Br\" ? \"brom\" : \"iod\";\n                return {\n                    will_react: true,\n                    confidence: 0.9,\n                    formula: \"\".concat(alkaliMetal.symbol).concat(halogen.symbol, \"O3\"),\n                    name: \"\".concat((_this_elements_get2 = this.elements.get(alkaliMetal.symbol)) === null || _this_elements_get2 === void 0 ? void 0 : _this_elements_get2.name.toLowerCase(), \" \").concat(halogenName, \"ate\"),\n                    properties: {\n                        state: \"solid\",\n                        type: \"ionic compound\",\n                        color: \"white\",\n                        solubility: \"highly soluble\"\n                    },\n                    safety: {\n                        hazard_level: \"medium\",\n                        warnings: [\n                            \"Oxidizing agent\",\n                            \"May cause irritation\"\n                        ]\n                    },\n                    uses: [\n                        \"Oxidizing agent\",\n                        \"Chemical synthesis\",\n                        \"Industrial processes\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R029 - Alkali Metal + Halogen + Oxygen → Metal Halate\",\n                    warnings: [\n                        \"Strong oxidizer - keep away from combustible materials\"\n                    ]\n                };\n            }\n        }\n        // Alkaline Earth Metal + Halogen (Binary) - Be, Mg, Ca, Sr, Ba, Ra + F, Cl, Br, I\n        const alkalineEarthMetals = [\n            \"Be\",\n            \"Mg\",\n            \"Ca\",\n            \"Sr\",\n            \"Ba\",\n            \"Ra\"\n        ];\n        const alkalineEarthMetal = elements.find((e)=>alkalineEarthMetals.includes(e.symbol));\n        if (alkalineEarthMetal && halogen && elementSymbols.length === 2) {\n            if (elementCounts[alkalineEarthMetal.symbol] === 1 && elementCounts[halogen.symbol] === 2) {\n                var _this_elements_get3;\n                return {\n                    will_react: true,\n                    confidence: 0.95,\n                    formula: \"\".concat(alkalineEarthMetal.symbol).concat(halogen.symbol, \"2\"),\n                    name: \"\".concat((_this_elements_get3 = this.elements.get(alkalineEarthMetal.symbol)) === null || _this_elements_get3 === void 0 ? void 0 : _this_elements_get3.name.toLowerCase(), \" \").concat(this.getHalideNames()[halogen.symbol]),\n                    properties: {\n                        state: \"solid\",\n                        type: \"ionic compound\",\n                        color: \"white\",\n                        crystal_structure: \"ionic lattice\"\n                    },\n                    safety: {\n                        hazard_level: \"low\",\n                        warnings: [\n                            \"Generally safe\",\n                            \"Avoid ingestion\"\n                        ]\n                    },\n                    uses: [\n                        \"Industrial processes\",\n                        \"Chemical synthesis\",\n                        \"Research\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R030 - Alkaline Earth Metal + Halogen → Metal Halide\",\n                    warnings: []\n                };\n            }\n        }\n        // Transition Metal + Oxygen (Metal Oxides) - Sc, Ti, V, Cr, Mn, Fe, Co, Ni, Cu, Zn, etc.\n        const transitionMetals = [\n            \"Sc\",\n            \"Ti\",\n            \"V\",\n            \"Cr\",\n            \"Mn\",\n            \"Fe\",\n            \"Co\",\n            \"Ni\",\n            \"Cu\",\n            \"Zn\",\n            \"Y\",\n            \"Zr\",\n            \"Nb\",\n            \"Mo\",\n            \"Tc\",\n            \"Ru\",\n            \"Rh\",\n            \"Pd\",\n            \"Ag\",\n            \"Cd\",\n            \"Hf\",\n            \"Ta\",\n            \"W\",\n            \"Re\",\n            \"Os\",\n            \"Ir\",\n            \"Pt\",\n            \"Au\",\n            \"Hg\"\n        ];\n        const transitionMetal = elements.find((e)=>transitionMetals.includes(e.symbol));\n        if (transitionMetal && elementSymbols.includes(\"O\") && elementSymbols.length === 2) {\n            const metalSymbol = transitionMetal.symbol;\n            const oxygenCount = elementCounts[\"O\"];\n            const metalCount = elementCounts[metalSymbol];\n            // Common oxidation states for transition metals\n            let formula = \"\";\n            let oxidationState = \"\";\n            if (metalCount === 2 && oxygenCount === 3) {\n                formula = \"\".concat(metalSymbol, \"2O3\");\n                oxidationState = \"+3\";\n            } else if (metalCount === 1 && oxygenCount === 1) {\n                formula = \"\".concat(metalSymbol, \"O\");\n                oxidationState = \"+2\";\n            } else if (metalCount === 1 && oxygenCount === 2) {\n                formula = \"\".concat(metalSymbol, \"O2\");\n                oxidationState = \"+4\";\n            } else if (metalCount === 3 && oxygenCount === 4) {\n                formula = \"\".concat(metalSymbol, \"3O4\");\n                oxidationState = \"mixed\";\n            }\n            if (formula) {\n                var _this_elements_get4;\n                return {\n                    will_react: true,\n                    confidence: 0.9,\n                    formula,\n                    name: \"\".concat((_this_elements_get4 = this.elements.get(metalSymbol)) === null || _this_elements_get4 === void 0 ? void 0 : _this_elements_get4.name.toLowerCase(), \" oxide\"),\n                    properties: {\n                        state: \"solid\",\n                        type: \"ionic compound\",\n                        color: this.getTransitionMetalOxideColor(metalSymbol),\n                        crystal_structure: \"metal oxide lattice\"\n                    },\n                    safety: {\n                        hazard_level: \"low\",\n                        warnings: [\n                            \"Generally safe\",\n                            \"May cause irritation if inhaled\"\n                        ]\n                    },\n                    uses: [\n                        \"Catalyst\",\n                        \"Pigment\",\n                        \"Ceramic production\",\n                        \"Industrial processes\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R031 - Transition Metal + Oxygen → Metal Oxide\",\n                    warnings: [\n                        \"Metal in \".concat(oxidationState, \" oxidation state\")\n                    ]\n                };\n            }\n        }\n        // Lanthanide + Oxygen (Rare Earth Oxides) - La, Ce, Pr, Nd, Pm, Sm, Eu, Gd, Tb, Dy, Ho, Er, Tm, Yb, Lu\n        const lanthanides = [\n            \"La\",\n            \"Ce\",\n            \"Pr\",\n            \"Nd\",\n            \"Pm\",\n            \"Sm\",\n            \"Eu\",\n            \"Gd\",\n            \"Tb\",\n            \"Dy\",\n            \"Ho\",\n            \"Er\",\n            \"Tm\",\n            \"Yb\",\n            \"Lu\"\n        ];\n        const lanthanide = elements.find((e)=>lanthanides.includes(e.symbol));\n        if (lanthanide && elementSymbols.includes(\"O\") && elementSymbols.length === 2) {\n            if (elementCounts[lanthanide.symbol] === 2 && elementCounts[\"O\"] === 3) {\n                var _this_elements_get5;\n                return {\n                    will_react: true,\n                    confidence: 0.95,\n                    formula: \"\".concat(lanthanide.symbol, \"2O3\"),\n                    name: \"\".concat((_this_elements_get5 = this.elements.get(lanthanide.symbol)) === null || _this_elements_get5 === void 0 ? void 0 : _this_elements_get5.name.toLowerCase(), \" oxide\"),\n                    properties: {\n                        state: \"solid\",\n                        type: \"ionic compound\",\n                        color: \"varies by element\",\n                        crystal_structure: \"rare earth oxide structure\"\n                    },\n                    safety: {\n                        hazard_level: \"low\",\n                        warnings: [\n                            \"Generally safe\",\n                            \"Rare earth element\"\n                        ]\n                    },\n                    uses: [\n                        \"Catalysts\",\n                        \"Phosphors\",\n                        \"High-tech applications\",\n                        \"Research\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R032 - Lanthanide + Oxygen → Rare Earth Oxide\",\n                    warnings: [\n                        \"Valuable rare earth compound\"\n                    ]\n                };\n            }\n        }\n        // Actinide + Oxygen (Actinide Oxides) - Th, Pa, U, Np, Pu, Am, Cm, Bk, Cf, Es, Fm, Md, No, Lr\n        const actinides = [\n            \"Th\",\n            \"Pa\",\n            \"U\",\n            \"Np\",\n            \"Pu\",\n            \"Am\",\n            \"Cm\",\n            \"Bk\",\n            \"Cf\",\n            \"Es\",\n            \"Fm\",\n            \"Md\",\n            \"No\",\n            \"Lr\"\n        ];\n        const actinide = elements.find((e)=>actinides.includes(e.symbol));\n        if (actinide && elementSymbols.includes(\"O\") && elementSymbols.length === 2) {\n            if (elementCounts[actinide.symbol] === 1 && elementCounts[\"O\"] === 2) {\n                var _this_elements_get6;\n                return {\n                    will_react: true,\n                    confidence: 0.9,\n                    formula: \"\".concat(actinide.symbol, \"O2\"),\n                    name: \"\".concat((_this_elements_get6 = this.elements.get(actinide.symbol)) === null || _this_elements_get6 === void 0 ? void 0 : _this_elements_get6.name.toLowerCase(), \" dioxide\"),\n                    properties: {\n                        state: \"solid\",\n                        type: \"ionic compound\",\n                        color: \"varies by element\",\n                        radioactivity: \"highly radioactive\"\n                    },\n                    safety: {\n                        hazard_level: \"very high\",\n                        warnings: [\n                            \"Highly radioactive\",\n                            \"Extremely dangerous\",\n                            \"Requires special handling\",\n                            \"Nuclear material\"\n                        ]\n                    },\n                    uses: [\n                        \"Nuclear fuel\",\n                        \"Research\",\n                        \"Nuclear weapons (restricted)\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R033 - Actinide + Oxygen → Actinide Oxide\",\n                    warnings: [\n                        \"RADIOACTIVE - Handle only in specialized facilities\",\n                        \"Requires nuclear licensing\"\n                    ]\n                };\n            }\n        }\n        // Post-transition Metals + Halogen - Al, Ga, In, Tl, Sn, Pb, Bi\n        const postTransitionMetals = [\n            \"Al\",\n            \"Ga\",\n            \"In\",\n            \"Tl\",\n            \"Sn\",\n            \"Pb\",\n            \"Bi\"\n        ];\n        const postTransitionMetal = elements.find((e)=>postTransitionMetals.includes(e.symbol));\n        if (postTransitionMetal && halogen && elementSymbols.length === 2) {\n            const metalSymbol = postTransitionMetal.symbol;\n            const halogenSymbol = halogen.symbol;\n            const metalCount = elementCounts[metalSymbol];\n            const halogenCount = elementCounts[halogenSymbol];\n            // Common stoichiometry for post-transition metals\n            if (metalSymbol === \"Al\" && metalCount === 1 && halogenCount === 3 || metalSymbol === \"Ga\" && metalCount === 1 && halogenCount === 3 || metalSymbol === \"In\" && metalCount === 1 && halogenCount === 3) {\n                var _this_elements_get7;\n                return {\n                    will_react: true,\n                    confidence: 0.95,\n                    formula: \"\".concat(metalSymbol).concat(halogenSymbol, \"3\"),\n                    name: \"\".concat((_this_elements_get7 = this.elements.get(metalSymbol)) === null || _this_elements_get7 === void 0 ? void 0 : _this_elements_get7.name.toLowerCase(), \" \").concat(this.getHalideNames()[halogenSymbol]),\n                    properties: {\n                        state: \"solid\",\n                        type: \"ionic compound\",\n                        color: \"white to colored\",\n                        crystal_structure: \"ionic lattice\"\n                    },\n                    safety: {\n                        hazard_level: \"medium\",\n                        warnings: [\n                            \"May cause irritation\",\n                            \"Avoid prolonged exposure\"\n                        ]\n                    },\n                    uses: [\n                        \"Industrial processes\",\n                        \"Chemical synthesis\",\n                        \"Electronics\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R034 - Post-transition Metal + Halogen → Metal Halide\",\n                    warnings: []\n                };\n            }\n        }\n        // Metalloid + Halogen - B, Si, Ge, As, Sb, Te\n        const metalloids = [\n            \"B\",\n            \"Si\",\n            \"Ge\",\n            \"As\",\n            \"Sb\",\n            \"Te\"\n        ];\n        const metalloid = elements.find((e)=>metalloids.includes(e.symbol));\n        if (metalloid && halogen && elementSymbols.length === 2) {\n            const metalloidSymbol = metalloid.symbol;\n            const halogenSymbol = halogen.symbol;\n            const metalloidCount = elementCounts[metalloidSymbol];\n            const halogenCount = elementCounts[halogenSymbol];\n            if (metalloidCount === 1 && (halogenCount === 3 || halogenCount === 4)) {\n                var _this_elements_get8;\n                return {\n                    will_react: true,\n                    confidence: 0.9,\n                    formula: \"\".concat(metalloidSymbol).concat(halogenSymbol).concat(halogenCount),\n                    name: \"\".concat((_this_elements_get8 = this.elements.get(metalloidSymbol)) === null || _this_elements_get8 === void 0 ? void 0 : _this_elements_get8.name.toLowerCase(), \" \").concat(this.getHalideNames()[halogenSymbol]),\n                    properties: {\n                        state: halogenCount === 4 ? \"liquid\" : \"solid\",\n                        type: \"covalent compound\",\n                        color: \"colorless to colored\"\n                    },\n                    safety: {\n                        hazard_level: \"high\",\n                        warnings: [\n                            \"Toxic\",\n                            \"Corrosive\",\n                            \"Avoid inhalation\"\n                        ]\n                    },\n                    uses: [\n                        \"Chemical synthesis\",\n                        \"Industrial processes\",\n                        \"Semiconductor industry\"\n                    ],\n                    source: \"rules_engine\",\n                    rule_applied: \"R035 - Metalloid + Halogen → Metalloid Halide\",\n                    warnings: [\n                        \"Handle with caution - toxic compound\"\n                    ]\n                };\n            }\n        }\n        // Noble Gas Compounds (Rare but possible) - He, Ne, Ar, Kr, Xe, Rn\n        const nobleGases = [\n            \"He\",\n            \"Ne\",\n            \"Ar\",\n            \"Kr\",\n            \"Xe\",\n            \"Rn\"\n        ];\n        const nobleGas = elements.find((e)=>nobleGases.includes(e.symbol));\n        if (nobleGas && elementSymbols.includes(\"F\") && elementSymbols.length === 2) {\n            const gasSymbol = nobleGas.symbol;\n            if ((gasSymbol === \"Xe\" || gasSymbol === \"Kr\") && elementCounts[gasSymbol] === 1) {\n                const fluorineCount = elementCounts[\"F\"];\n                if (fluorineCount === 2 || fluorineCount === 4 || fluorineCount === 6) {\n                    var _this_elements_get9;\n                    return {\n                        will_react: true,\n                        confidence: 0.8,\n                        formula: \"\".concat(gasSymbol, \"F\").concat(fluorineCount),\n                        name: \"\".concat((_this_elements_get9 = this.elements.get(gasSymbol)) === null || _this_elements_get9 === void 0 ? void 0 : _this_elements_get9.name.toLowerCase(), \" fluoride\"),\n                        properties: {\n                            state: \"solid\",\n                            type: \"molecular compound\",\n                            color: \"colorless\",\n                            stability: \"moderately stable\"\n                        },\n                        safety: {\n                            hazard_level: \"very high\",\n                            warnings: [\n                                \"Highly reactive\",\n                                \"Toxic\",\n                                \"Strong oxidizer\",\n                                \"Experimental compound\"\n                            ]\n                        },\n                        uses: [\n                            \"Research\",\n                            \"Fluorinating agent\",\n                            \"Scientific studies\"\n                        ],\n                        source: \"rules_engine\",\n                        rule_applied: \"R036 - Noble Gas + Fluorine → Noble Gas Fluoride\",\n                        warnings: [\n                            \"Extremely rare and reactive compound\",\n                            \"Requires specialized conditions\"\n                        ]\n                    };\n                }\n            }\n        }\n        // Default for multi-element: attempt to predict based on common patterns\n        return {\n            will_react: false,\n            confidence: 0.4,\n            source: \"rules_engine\",\n            reason: \"Complex multi-element combination (\".concat(elements.length, \" elements) - requires specific conditions\"),\n            note: \"Try simpler binary combinations or check specific compound formulas\",\n            warnings: [\n                \"Multi-element reactions often require specific conditions like catalysts, temperature, or pressure\"\n            ]\n        };\n    }\n    constructor(){\n        this.rules = [];\n        this.elements = new Map();\n        this.cache = new Map();\n        this.loadDatabase();\n        this.initializeElements();\n        this.loadChemistryRules();\n    }\n}\n// Export singleton instance\nconst chemCraftAI = new ChemCraftAI();\n/* harmony default export */ __webpack_exports__[\"default\"] = (chemCraftAI);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/chemCraftAI.ts\n"));

/***/ })

});