"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/quiz/page",{

/***/ "(app-pages-browser)/./src/lib/enhancedQuizLoader.ts":
/*!***************************************!*\
  !*** ./src/lib/enhancedQuizLoader.ts ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getElementData: function() { return /* binding */ getElementData; },\n/* harmony export */   getEnhancedQuizMetadata: function() { return /* binding */ getEnhancedQuizMetadata; },\n/* harmony export */   getReactionData: function() { return /* binding */ getReactionData; },\n/* harmony export */   loadEnhancedQuizData: function() { return /* binding */ loadEnhancedQuizData; }\n/* harmony export */ });\n/* harmony import */ var _types_quiz__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types/quiz */ \"(app-pages-browser)/./src/types/quiz.ts\");\n\nasync function loadEnhancedQuizData() {\n    try {\n        const response = await fetch(\"/data/enhanced-quiz-data.json\");\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch quiz data: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        return data.quiz.questions.map(transformQuestion);\n    } catch (error) {\n        console.error(\"Error loading enhanced quiz data:\", error);\n        return [];\n    }\n}\nfunction transformQuestion(enhancedQuestion) {\n    // Map question types\n    const typeMapping = {\n        \"multiple_choice\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuestionType.MULTIPLE_CHOICE,\n        \"true_false\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuestionType.TRUE_FALSE,\n        \"fill_in_blank\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuestionType.FILL_IN_BLANK,\n        \"match_pair\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuestionType.MULTIPLE_CHOICE,\n        \"reaction_prediction\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuestionType.MULTIPLE_CHOICE\n    };\n    // Map difficulties\n    const difficultyMapping = {\n        \"easy\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.Difficulty.EASY,\n        \"medium\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.Difficulty.MEDIUM,\n        \"hard\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.Difficulty.HARD\n    };\n    // Map topics to categories\n    const categoryMapping = {\n        \"atomic_structure\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuizCategory.ATOMIC_STRUCTURE,\n        \"periodic_properties\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuizCategory.PERIODIC_TABLE,\n        \"bonding\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuizCategory.CHEMICAL_BONDS,\n        \"reaction\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuizCategory.REACTIONS,\n        \"group_trends\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuizCategory.PERIODIC_TABLE,\n        \"compounds\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuizCategory.COMPOUNDS,\n        \"stoichiometry\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuizCategory.STOICHIOMETRY,\n        \"thermodynamics\": _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuizCategory.THERMODYNAMICS\n    };\n    // Calculate points based on difficulty\n    const pointsMapping = {\n        \"easy\": 10,\n        \"medium\": 15,\n        \"hard\": 20\n    };\n    return {\n        id: \"enhanced_\".concat(enhancedQuestion.id),\n        type: typeMapping[enhancedQuestion.type] || _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuestionType.MULTIPLE_CHOICE,\n        difficulty: difficultyMapping[enhancedQuestion.difficulty] || _types_quiz__WEBPACK_IMPORTED_MODULE_0__.Difficulty.MEDIUM,\n        category: categoryMapping[enhancedQuestion.topic] || _types_quiz__WEBPACK_IMPORTED_MODULE_0__.QuizCategory.GENERAL,\n        question: enhancedQuestion.question,\n        options: enhancedQuestion.options,\n        correctAnswer: enhancedQuestion.answer,\n        explanation: enhancedQuestion.explanation,\n        points: pointsMapping[enhancedQuestion.difficulty] || 15,\n        hints: generateHints(enhancedQuestion)\n    };\n}\nfunction generateHints(question) {\n    const hints = [];\n    // Generate context-based hints\n    if (question.related_elements.length > 0) {\n        hints.push(\"This question relates to: \".concat(question.related_elements.join(\", \")));\n    }\n    // Topic-specific hints\n    switch(question.topic){\n        case \"atomic_structure\":\n            hints.push(\"Think about the structure of atoms and their components\");\n            break;\n        case \"periodic_properties\":\n            hints.push(\"Consider the trends in the periodic table\");\n            break;\n        case \"bonding\":\n            hints.push(\"Think about how atoms connect to form compounds\");\n            break;\n        case \"reaction\":\n            hints.push(\"Consider the chemical reaction and what products form\");\n            break;\n        case \"group_trends\":\n            hints.push(\"Elements in the same group have similar properties\");\n            break;\n    }\n    return hints.slice(0, 2); // Limit to 2 hints\n}\nasync function getEnhancedQuizMetadata() {\n    try {\n        const response = await fetch(\"/data/enhanced-quiz-data.json\");\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch quiz metadata: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        return data.quiz.metadata;\n    } catch (error) {\n        console.error(\"Error loading enhanced quiz metadata:\", error);\n        return null;\n    }\n}\nasync function getReactionData() {\n    try {\n        const response = await fetch(\"/data/enhanced-quiz-data.json\");\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch reaction data: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        return data.reactions;\n    } catch (error) {\n        console.error(\"Error loading reaction data:\", error);\n        return [];\n    }\n}\nasync function getElementData() {\n    try {\n        const response = await fetch(\"/data/enhanced-quiz-data.json\");\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch element data: \".concat(response.statusText));\n        }\n        const data = await response.json();\n        return data.elements;\n    } catch (error) {\n        console.error(\"Error loading element data:\", error);\n        return [];\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/enhancedQuizLoader.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/stores/quizStore.ts":
/*!*********************************!*\
  !*** ./src/stores/quizStore.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useQuizStore: function() { return /* binding */ useQuizStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/./node_modules/zustand/esm/middleware.mjs\");\n/* harmony import */ var _constants_quizData__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/constants/quizData */ \"(app-pages-browser)/./src/constants/quizData.ts\");\n/* harmony import */ var _lib_quizUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/quizUtils */ \"(app-pages-browser)/./src/lib/quizUtils.ts\");\n/* harmony import */ var _constants_elements__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/constants/elements */ \"(app-pages-browser)/./src/constants/elements.ts\");\n/* harmony import */ var _lib_enhancedQuizLoader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/enhancedQuizLoader */ \"(app-pages-browser)/./src/lib/enhancedQuizLoader.ts\");\n\n\n\n\n\n\nconst initialStats = {\n    totalQuizzes: 0,\n    totalQuestions: 0,\n    correctAnswers: 0,\n    averageScore: 0,\n    bestScore: 0,\n    categoryStats: {},\n    difficultyStats: {},\n    streak: 0,\n    lastPlayedDate: new Date()\n};\nconst useQuizStore = (0,zustand__WEBPACK_IMPORTED_MODULE_4__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_5__.persist)((set, get)=>({\n        questions: _constants_quizData__WEBPACK_IMPORTED_MODULE_0__.QUIZ_QUESTIONS,\n        enhancedQuestions: [],\n        currentSession: null,\n        stats: initialStats,\n        isLoading: false,\n        isEnhancedLoaded: false,\n        loadEnhancedQuestions: async ()=>{\n            try {\n                set({\n                    isLoading: true\n                });\n                const enhancedQuestions = await (0,_lib_enhancedQuizLoader__WEBPACK_IMPORTED_MODULE_3__.loadEnhancedQuizData)();\n                console.log(\"QuizStore: Loaded \".concat(enhancedQuestions.length, \" enhanced questions\"));\n                set({\n                    enhancedQuestions,\n                    isEnhancedLoaded: true,\n                    isLoading: false\n                });\n            } catch (error) {\n                console.error(\"QuizStore: Failed to load enhanced questions:\", error);\n                set({\n                    isLoading: false\n                });\n            }\n        },\n        startQuiz: (settings)=>{\n            try {\n                set({\n                    isLoading: true\n                });\n                // TestSprite Enhancement: Validate inputs before quiz generation\n                const validation = (0,_lib_quizUtils__WEBPACK_IMPORTED_MODULE_1__.validateQuizInputs)(_constants_elements__WEBPACK_IMPORTED_MODULE_2__.ELEMENTS, settings.difficulty[0] || \"medium\");\n                if (!validation.isValid) {\n                    console.error(\"QuizStore: Invalid quiz settings:\", validation.error);\n                    set({\n                        isLoading: false\n                    });\n                    return;\n                }\n                const { questions } = get();\n                // Enhanced question generation with fallback to dynamic generation\n                let filteredQuestions = questions.filter((q)=>settings.categories.includes(q.category) && settings.difficulty.includes(q.difficulty));\n                // TestSprite Enhancement: Generate additional questions if needed\n                const requiredQuestions = settings.numberOfQuestions;\n                if (filteredQuestions.length < requiredQuestions) {\n                    console.log(\"QuizStore: Need \".concat(requiredQuestions - filteredQuestions.length, \" more questions, generating dynamically...\"));\n                    for(let i = filteredQuestions.length; i < requiredQuestions; i++){\n                        const difficultyLevel = settings.difficulty[i % settings.difficulty.length];\n                        const generatedQuestion = (0,_lib_quizUtils__WEBPACK_IMPORTED_MODULE_1__.generateQuizQuestionSafe)(_constants_elements__WEBPACK_IMPORTED_MODULE_2__.ELEMENTS, difficultyLevel);\n                        if (generatedQuestion) {\n                            filteredQuestions.push(generatedQuestion);\n                        } else {\n                            console.warn(\"QuizStore: Failed to generate question \".concat(i + 1));\n                            break; // Stop if generation fails\n                        }\n                    }\n                }\n                // Shuffle if random order is enabled\n                if (settings.randomOrder) {\n                    filteredQuestions = filteredQuestions.sort(()=>Math.random() - 0.5);\n                }\n                // Limit to requested number of questions\n                filteredQuestions = filteredQuestions.slice(0, settings.numberOfQuestions);\n                // TestSprite Enhancement: Ensure we have valid questions\n                if (filteredQuestions.length === 0) {\n                    console.error(\"QuizStore: No valid questions available for selected settings\");\n                    set({\n                        isLoading: false\n                    });\n                    return;\n                }\n                const session = {\n                    id: Date.now().toString(),\n                    questions: filteredQuestions,\n                    currentQuestionIndex: 0,\n                    answers: [],\n                    score: 0,\n                    startTime: new Date(),\n                    timeSpent: 0,\n                    completed: false,\n                    settings\n                };\n                set({\n                    currentSession: session,\n                    isLoading: false\n                });\n                console.log(\"QuizStore: Quiz started successfully with \".concat(filteredQuestions.length, \" questions\"));\n            } catch (error) {\n                console.error(\"QuizStore: Error starting quiz:\", error);\n                set({\n                    isLoading: false,\n                    currentSession: null\n                });\n                // TestSprite Enhancement: Attempt fallback quiz creation\n                try {\n                    console.log(\"QuizStore: Attempting fallback quiz with minimal settings...\");\n                    const { questions: fallbackQuestions } = get();\n                    const fallbackSession = {\n                        id: \"fallback-\".concat(Date.now()),\n                        questions: fallbackQuestions.slice(0, Math.min(5, fallbackQuestions.length)),\n                        currentQuestionIndex: 0,\n                        answers: [],\n                        score: 0,\n                        startTime: new Date(),\n                        timeSpent: 0,\n                        completed: false,\n                        settings: {\n                            ..._constants_quizData__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_QUIZ_SETTINGS,\n                            numberOfQuestions: Math.min(5, fallbackQuestions.length)\n                        }\n                    };\n                    set({\n                        currentSession: fallbackSession\n                    });\n                    console.log(\"QuizStore: Fallback quiz created successfully\");\n                } catch (fallbackError) {\n                    console.error(\"QuizStore: Fallback quiz creation also failed:\", fallbackError);\n                }\n            }\n        },\n        submitAnswer: (answer)=>{\n            const { currentSession } = get();\n            if (!currentSession) return;\n            const updatedSession = {\n                ...currentSession,\n                answers: [\n                    ...currentSession.answers,\n                    answer\n                ],\n                score: currentSession.score + answer.points\n            };\n            set({\n                currentSession: updatedSession\n            });\n        },\n        nextQuestion: ()=>{\n            const { currentSession } = get();\n            if (!currentSession) return;\n            const nextIndex = currentSession.currentQuestionIndex + 1;\n            const isCompleted = nextIndex >= currentSession.questions.length;\n            const updatedSession = {\n                ...currentSession,\n                currentQuestionIndex: nextIndex,\n                completed: isCompleted,\n                endTime: isCompleted ? new Date() : undefined\n            };\n            set({\n                currentSession: updatedSession\n            });\n            if (isCompleted) {\n                get().updateStats(updatedSession);\n            }\n        },\n        endQuiz: ()=>{\n            const { currentSession } = get();\n            if (!currentSession) return;\n            const updatedSession = {\n                ...currentSession,\n                completed: true,\n                endTime: new Date()\n            };\n            set({\n                currentSession: updatedSession\n            });\n            get().updateStats(updatedSession);\n        },\n        resetQuiz: ()=>{\n            set({\n                currentSession: null\n            });\n        },\n        getQuestionsByCategory: (category)=>{\n            const { questions } = get();\n            return questions.filter((q)=>q.category === category);\n        },\n        getQuestionsByDifficulty: (difficulty)=>{\n            const { questions } = get();\n            return questions.filter((q)=>q.difficulty === difficulty);\n        },\n        updateStats: (session)=>{\n            const { stats } = get();\n            const correctAnswers = session.answers.filter((a)=>a.isCorrect).length;\n            const totalQuestions = session.answers.length;\n            const sessionScore = correctAnswers / totalQuestions * 100;\n            const updatedStats = {\n                ...stats,\n                totalQuizzes: stats.totalQuizzes + 1,\n                totalQuestions: stats.totalQuestions + totalQuestions,\n                correctAnswers: stats.correctAnswers + correctAnswers,\n                averageScore: (stats.averageScore * stats.totalQuizzes + sessionScore) / (stats.totalQuizzes + 1),\n                bestScore: Math.max(stats.bestScore, sessionScore),\n                streak: session.answers.every((a)=>a.isCorrect) ? stats.streak + 1 : 0,\n                lastPlayedDate: new Date(),\n                categoryStats: stats.categoryStats,\n                difficultyStats: stats.difficultyStats\n            };\n            set({\n                stats: updatedStats\n            });\n        }\n    }), {\n    name: \"quiz-store\",\n    partialize: (state)=>({\n            stats: state.stats\n        })\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/stores/quizStore.ts\n"));

/***/ })

});