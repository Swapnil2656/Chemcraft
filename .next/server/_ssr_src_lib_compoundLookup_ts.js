"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_compoundLookup_ts";
exports.ids = ["_ssr_src_lib_compoundLookup_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/compoundLookup.ts":
/*!***********************************!*\
  !*** ./src/lib/compoundLookup.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getElementWikipediaUrl: () => (/* binding */ getElementWikipediaUrl),\n/* harmony export */   lookupCompound: () => (/* binding */ lookupCompound)\n/* harmony export */ });\n// Cache for compounds\nconst compoundCache = new Map();\nlet compoundsDatabase = null;\nasync function lookupCompound(elements) {\n    // Normalize element names and create lookup keys\n    const elementNames = elements.map((el)=>el.name);\n    const sortedNames = [\n        ...elementNames\n    ].sort();\n    // Generate all possible permutations for lookup\n    const lookupKeys = new Set();\n    // Add basic combinations\n    lookupKeys.add(elementNames.join(\"+\"));\n    lookupKeys.add(sortedNames.join(\"+\"));\n    lookupKeys.add(elementNames.reverse().join(\"+\"));\n    // For 3+ elements, try different groupings\n    if (elementNames.length >= 3) {\n        const permutations = getPermutations(elementNames);\n        permutations.forEach((perm)=>lookupKeys.add(perm.join(\"+\")));\n    }\n    const lookupKeysArray = Array.from(lookupKeys);\n    // Looking up compound for elements\n    // Check cache first for any of the keys\n    for (const key of lookupKeysArray){\n        if (compoundCache.has(key)) {\n            // Found in cache\n            return compoundCache.get(key) || null;\n        }\n    }\n    // Load compounds database if not loaded\n    if (!compoundsDatabase) {\n        try {\n            const response = await fetch(\"/data/compounds.json\");\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            compoundsDatabase = await response.json();\n        // Loaded compounds database successfully\n        } catch (error) {\n            console.error(\"Failed to load compounds database:\", error);\n            compoundsDatabase = {};\n        }\n    }\n    // Check local database with all possible keys\n    if (compoundsDatabase) {\n        for (const key of lookupKeysArray){\n            const localCompound = compoundsDatabase[key];\n            if (localCompound) {\n                // Found in local database\n                compoundCache.set(sortedNames.join(\"+\"), localCompound);\n                return localCompound;\n            }\n        }\n    }\n    // Not found in local database, querying PubChem API\n    // Query PubChem API for comprehensive compound database\n    try {\n        const pubchemCompound = await queryPubChemByElements(elements);\n        if (pubchemCompound) {\n            // Found compound via PubChem\n            compoundCache.set(sortedNames.join(\"+\"), pubchemCompound);\n            return pubchemCompound;\n        }\n    } catch (error) {\n        console.error(\"PubChem query failed:\", error);\n    }\n    // Cache negative result to avoid repeated API calls\n    compoundCache.set(sortedNames.join(\"+\"), null);\n    return null;\n}\nasync function queryPubChemByElements(elements) {\n    try {\n        // Generate possible molecular formulas\n        const formulas = generatePossibleFormulas(elements);\n        // Try each formula with PubChem\n        for (const formula of formulas){\n            const compound = await queryPubChemByFormula(formula);\n            if (compound) {\n                return compound;\n            }\n        }\n        // Try name-based search as fallback\n        const nameQuery = elements.map((el)=>el.name.toLowerCase()).sort().join(\" \");\n        const nameCompound = await queryPubChemByName(nameQuery);\n        if (nameCompound) {\n            return nameCompound;\n        }\n        return null;\n    } catch (error) {\n        return null;\n    }\n}\nasync function queryPubChemByFormula(formula) {\n    try {\n        const searchUrl = `https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/formula/${formula}/JSON`;\n        const response = await fetch(searchUrl);\n        if (!response.ok) return null;\n        const data = await response.json();\n        const compounds = data.PC_Compounds;\n        if (!compounds || compounds.length === 0) return null;\n        // Get the first compound\n        const compound = compounds[0];\n        const cid = compound.id?.id?.cid;\n        if (!cid) return null;\n        // Get detailed properties\n        const propsUrl = `https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/${cid}/property/MolecularFormula,IUPACName,MolecularWeight,CanonicalSMILES/JSON`;\n        const propsResponse = await fetch(propsUrl);\n        if (!propsResponse.ok) return null;\n        const propsData = await propsResponse.json();\n        const props = propsData.PropertyTable?.Properties?.[0];\n        if (!props) return null;\n        const name = props.IUPACName || props.MolecularFormula || \"Unknown compound\";\n        return {\n            elements: [],\n            formula: props.MolecularFormula || formula,\n            name: name.length > 50 ? props.MolecularFormula : name,\n            properties: {\n                state: \"Unknown\",\n                melting_point: \"Unknown\",\n                boiling_point: \"Unknown\",\n                density: \"Unknown\"\n            },\n            uses: [\n                \"Chemical compound\",\n                \"Research\",\n                \"Industrial applications\"\n            ],\n            links: {\n                wikipedia: `https://en.wikipedia.org/wiki/${encodeURIComponent(name)}`,\n                pubchem: `https://pubchem.ncbi.nlm.nih.gov/compound/${cid}`\n            }\n        };\n    } catch (error) {\n        return null;\n    }\n}\nasync function queryPubChemByName(nameQuery) {\n    try {\n        const searchUrl = `https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/name/${encodeURIComponent(nameQuery)}/JSON`;\n        const response = await fetch(searchUrl);\n        if (!response.ok) return null;\n        const data = await response.json();\n        const compounds = data.PC_Compounds;\n        if (!compounds || compounds.length === 0) return null;\n        const compound = compounds[0];\n        const cid = compound.id?.id?.cid;\n        if (!cid) return null;\n        const propsUrl = `https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/${cid}/property/MolecularFormula,IUPACName,MolecularWeight/JSON`;\n        const propsResponse = await fetch(propsUrl);\n        if (!propsResponse.ok) return null;\n        const propsData = await propsResponse.json();\n        const props = propsData.PropertyTable?.Properties?.[0];\n        if (!props) return null;\n        const name = props.IUPACName || nameQuery;\n        return {\n            elements: [],\n            formula: props.MolecularFormula || \"Unknown\",\n            name: name.length > 50 ? props.MolecularFormula : name,\n            properties: {\n                state: \"Unknown\",\n                melting_point: \"Unknown\",\n                boiling_point: \"Unknown\",\n                density: \"Unknown\"\n            },\n            uses: [\n                \"Chemical compound\",\n                \"Research\",\n                \"Industrial applications\"\n            ],\n            links: {\n                wikipedia: `https://en.wikipedia.org/wiki/${encodeURIComponent(name)}`,\n                pubchem: `https://pubchem.ncbi.nlm.nih.gov/compound/${cid}`\n            }\n        };\n    } catch (error) {\n        return null;\n    }\n}\nfunction generatePossibleFormulas(elements) {\n    const formulas = [];\n    const symbols = elements.map((el)=>el.symbol);\n    if (elements.length === 2) {\n        const [s1, s2] = symbols;\n        formulas.push(`${s1}${s2}`, `${s2}${s1}`, `${s1}2${s2}`, `${s2}2${s1}`, `${s1}${s2}2`, `${s2}${s1}2`, `${s1}2${s2}3`, `${s2}2${s1}3`, `${s1}3${s2}2`, `${s2}3${s1}2`, `${s1}3${s2}`, `${s2}3${s1}`, `${s1}${s2}3`, `${s2}${s1}3`, `${s1}4${s2}`, `${s2}4${s1}`);\n    } else if (elements.length === 3) {\n        const [s1, s2, s3] = symbols;\n        formulas.push(`${s1}${s2}${s3}`, `${s1}${s3}${s2}`, `${s2}${s1}${s3}`, `${s2}${s3}${s1}`, `${s3}${s1}${s2}`, `${s3}${s2}${s1}`, `${s1}2${s2}${s3}`, `${s1}${s2}2${s3}`, `${s1}${s2}${s3}2`, `${s1}${s2}${s3}3`, `${s1}${s2}3${s3}`, `${s1}3${s2}${s3}`);\n    } else if (elements.length >= 4) {\n        // For 4+ elements, try basic combinations\n        formulas.push(symbols.join(\"\"));\n        formulas.push(symbols.reverse().join(\"\"));\n    }\n    return Array.from(new Set(formulas));\n}\nfunction getPermutations(arr) {\n    if (arr.length <= 1) return [\n        arr\n    ];\n    const result = [];\n    for(let i = 0; i < arr.length; i++){\n        const rest = [\n            ...arr.slice(0, i),\n            ...arr.slice(i + 1)\n        ];\n        const perms = getPermutations(rest);\n        for (const perm of perms){\n            result.push([\n                arr[i],\n                ...perm\n            ]);\n        }\n    }\n    return result;\n}\nfunction getElementWikipediaUrl(elementName) {\n    return `https://en.wikipedia.org/wiki/${encodeURIComponent(elementName)}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9zcmMvbGliL2NvbXBvdW5kTG9va3VwLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBaUJBLHNCQUFzQjtBQUN0QixNQUFNQSxnQkFBZ0IsSUFBSUM7QUFDMUIsSUFBSUMsb0JBQXlEO0FBRXRELGVBQWVDLGVBQWVDLFFBQTRDO0lBQy9FLGlEQUFpRDtJQUNqRCxNQUFNQyxlQUFlRCxTQUFTRSxHQUFHLENBQUNDLENBQUFBLEtBQU1BLEdBQUdDLElBQUk7SUFDL0MsTUFBTUMsY0FBYztXQUFJSjtLQUFhLENBQUNLLElBQUk7SUFFMUMsZ0RBQWdEO0lBQ2hELE1BQU1DLGFBQWEsSUFBSUM7SUFFdkIseUJBQXlCO0lBQ3pCRCxXQUFXRSxHQUFHLENBQUNSLGFBQWFTLElBQUksQ0FBQztJQUNqQ0gsV0FBV0UsR0FBRyxDQUFDSixZQUFZSyxJQUFJLENBQUM7SUFDaENILFdBQVdFLEdBQUcsQ0FBQ1IsYUFBYVUsT0FBTyxHQUFHRCxJQUFJLENBQUM7SUFFM0MsMkNBQTJDO0lBQzNDLElBQUlULGFBQWFXLE1BQU0sSUFBSSxHQUFHO1FBQzVCLE1BQU1DLGVBQWVDLGdCQUFnQmI7UUFDckNZLGFBQWFFLE9BQU8sQ0FBQ0MsQ0FBQUEsT0FBUVQsV0FBV0UsR0FBRyxDQUFDTyxLQUFLTixJQUFJLENBQUM7SUFDeEQ7SUFFQSxNQUFNTyxrQkFBa0JDLE1BQU1DLElBQUksQ0FBQ1o7SUFFbkMsbUNBQW1DO0lBRW5DLHdDQUF3QztJQUN4QyxLQUFLLE1BQU1hLE9BQU9ILGdCQUFpQjtRQUNqQyxJQUFJckIsY0FBY3lCLEdBQUcsQ0FBQ0QsTUFBTTtZQUMxQixpQkFBaUI7WUFDakIsT0FBT3hCLGNBQWMwQixHQUFHLENBQUNGLFFBQVE7UUFDbkM7SUFDRjtJQUVBLHdDQUF3QztJQUN4QyxJQUFJLENBQUN0QixtQkFBbUI7UUFDdEIsSUFBSTtZQUNGLE1BQU15QixXQUFXLE1BQU1DLE1BQU07WUFDN0IsSUFBSSxDQUFDRCxTQUFTRSxFQUFFLEVBQUU7Z0JBQ2hCLE1BQU0sSUFBSUMsTUFBTSxDQUFDLG9CQUFvQixFQUFFSCxTQUFTSSxNQUFNLENBQUMsQ0FBQztZQUMxRDtZQUNBN0Isb0JBQW9CLE1BQU15QixTQUFTSyxJQUFJO1FBQ3ZDLHlDQUF5QztRQUMzQyxFQUFFLE9BQU9DLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLHNDQUFzQ0E7WUFDcEQvQixvQkFBb0IsQ0FBQztRQUN2QjtJQUNGO0lBRUEsOENBQThDO0lBQzlDLElBQUlBLG1CQUFtQjtRQUNyQixLQUFLLE1BQU1zQixPQUFPSCxnQkFBaUI7WUFDakMsTUFBTWMsZ0JBQWdCakMsaUJBQWlCLENBQUNzQixJQUFJO1lBQzVDLElBQUlXLGVBQWU7Z0JBQ2pCLDBCQUEwQjtnQkFDMUJuQyxjQUFjb0MsR0FBRyxDQUFDM0IsWUFBWUssSUFBSSxDQUFDLE1BQU1xQjtnQkFDekMsT0FBT0E7WUFDVDtRQUNGO0lBQ0Y7SUFFQSxvREFBb0Q7SUFFcEQsd0RBQXdEO0lBQ3hELElBQUk7UUFDRixNQUFNRSxrQkFBa0IsTUFBTUMsdUJBQXVCbEM7UUFDckQsSUFBSWlDLGlCQUFpQjtZQUNuQiw2QkFBNkI7WUFDN0JyQyxjQUFjb0MsR0FBRyxDQUFDM0IsWUFBWUssSUFBSSxDQUFDLE1BQU11QjtZQUN6QyxPQUFPQTtRQUNUO0lBQ0YsRUFBRSxPQUFPSixPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyx5QkFBeUJBO0lBQ3pDO0lBRUEsb0RBQW9EO0lBQ3BEakMsY0FBY29DLEdBQUcsQ0FBQzNCLFlBQVlLLElBQUksQ0FBQyxNQUFNO0lBQ3pDLE9BQU87QUFDVDtBQUVBLGVBQWV3Qix1QkFBdUJsQyxRQUE0QztJQUNoRixJQUFJO1FBQ0YsdUNBQXVDO1FBQ3ZDLE1BQU1tQyxXQUFXQyx5QkFBeUJwQztRQUUxQyxnQ0FBZ0M7UUFDaEMsS0FBSyxNQUFNcUMsV0FBV0YsU0FBVTtZQUM5QixNQUFNRyxXQUFXLE1BQU1DLHNCQUFzQkY7WUFDN0MsSUFBSUMsVUFBVTtnQkFDWixPQUFPQTtZQUNUO1FBQ0Y7UUFFQSxvQ0FBb0M7UUFDcEMsTUFBTUUsWUFBWXhDLFNBQVNFLEdBQUcsQ0FBQ0MsQ0FBQUEsS0FBTUEsR0FBR0MsSUFBSSxDQUFDcUMsV0FBVyxJQUFJbkMsSUFBSSxHQUFHSSxJQUFJLENBQUM7UUFDeEUsTUFBTWdDLGVBQWUsTUFBTUMsbUJBQW1CSDtRQUM5QyxJQUFJRSxjQUFjO1lBQ2hCLE9BQU9BO1FBQ1Q7UUFFQSxPQUFPO0lBQ1QsRUFBRSxPQUFPYixPQUFPO1FBQ2QsT0FBTztJQUNUO0FBQ0Y7QUFFQSxlQUFlVSxzQkFBc0JGLE9BQWU7SUFDbEQsSUFBSTtRQUNGLE1BQU1PLFlBQVksQ0FBQywyREFBMkQsRUFBRVAsUUFBUSxLQUFLLENBQUM7UUFDOUYsTUFBTWQsV0FBVyxNQUFNQyxNQUFNb0I7UUFFN0IsSUFBSSxDQUFDckIsU0FBU0UsRUFBRSxFQUFFLE9BQU87UUFFekIsTUFBTW9CLE9BQU8sTUFBTXRCLFNBQVNLLElBQUk7UUFDaEMsTUFBTWtCLFlBQVlELEtBQUtFLFlBQVk7UUFFbkMsSUFBSSxDQUFDRCxhQUFhQSxVQUFVbEMsTUFBTSxLQUFLLEdBQUcsT0FBTztRQUVqRCx5QkFBeUI7UUFDekIsTUFBTTBCLFdBQVdRLFNBQVMsQ0FBQyxFQUFFO1FBQzdCLE1BQU1FLE1BQU1WLFNBQVNXLEVBQUUsRUFBRUEsSUFBSUQ7UUFFN0IsSUFBSSxDQUFDQSxLQUFLLE9BQU87UUFFakIsMEJBQTBCO1FBQzFCLE1BQU1FLFdBQVcsQ0FBQyx1REFBdUQsRUFBRUYsSUFBSSx5RUFBeUUsQ0FBQztRQUN6SixNQUFNRyxnQkFBZ0IsTUFBTTNCLE1BQU0wQjtRQUVsQyxJQUFJLENBQUNDLGNBQWMxQixFQUFFLEVBQUUsT0FBTztRQUU5QixNQUFNMkIsWUFBWSxNQUFNRCxjQUFjdkIsSUFBSTtRQUMxQyxNQUFNeUIsUUFBUUQsVUFBVUUsYUFBYSxFQUFFQyxZQUFZLENBQUMsRUFBRTtRQUV0RCxJQUFJLENBQUNGLE9BQU8sT0FBTztRQUVuQixNQUFNakQsT0FBT2lELE1BQU1HLFNBQVMsSUFBSUgsTUFBTUksZ0JBQWdCLElBQUk7UUFFMUQsT0FBTztZQUNMekQsVUFBVSxFQUFFO1lBQ1pxQyxTQUFTZ0IsTUFBTUksZ0JBQWdCLElBQUlwQjtZQUNuQ2pDLE1BQU1BLEtBQUtRLE1BQU0sR0FBRyxLQUFLeUMsTUFBTUksZ0JBQWdCLEdBQUdyRDtZQUNsRHNELFlBQVk7Z0JBQ1ZDLE9BQU87Z0JBQ1BDLGVBQWU7Z0JBQ2ZDLGVBQWU7Z0JBQ2ZDLFNBQVM7WUFDWDtZQUNBQyxNQUFNO2dCQUFDO2dCQUFxQjtnQkFBWTthQUEwQjtZQUNsRUMsT0FBTztnQkFDTEMsV0FBVyxDQUFDLDhCQUE4QixFQUFFQyxtQkFBbUI5RCxNQUFNLENBQUM7Z0JBQ3RFK0QsU0FBUyxDQUFDLDBDQUEwQyxFQUFFbkIsSUFBSSxDQUFDO1lBQzdEO1FBQ0Y7SUFDRixFQUFFLE9BQU9uQixPQUFPO1FBQ2QsT0FBTztJQUNUO0FBQ0Y7QUFFQSxlQUFlYyxtQkFBbUJILFNBQWlCO0lBQ2pELElBQUk7UUFDRixNQUFNSSxZQUFZLENBQUMsd0RBQXdELEVBQUVzQixtQkFBbUIxQixXQUFXLEtBQUssQ0FBQztRQUNqSCxNQUFNakIsV0FBVyxNQUFNQyxNQUFNb0I7UUFFN0IsSUFBSSxDQUFDckIsU0FBU0UsRUFBRSxFQUFFLE9BQU87UUFFekIsTUFBTW9CLE9BQU8sTUFBTXRCLFNBQVNLLElBQUk7UUFDaEMsTUFBTWtCLFlBQVlELEtBQUtFLFlBQVk7UUFFbkMsSUFBSSxDQUFDRCxhQUFhQSxVQUFVbEMsTUFBTSxLQUFLLEdBQUcsT0FBTztRQUVqRCxNQUFNMEIsV0FBV1EsU0FBUyxDQUFDLEVBQUU7UUFDN0IsTUFBTUUsTUFBTVYsU0FBU1csRUFBRSxFQUFFQSxJQUFJRDtRQUU3QixJQUFJLENBQUNBLEtBQUssT0FBTztRQUVqQixNQUFNRSxXQUFXLENBQUMsdURBQXVELEVBQUVGLElBQUkseURBQXlELENBQUM7UUFDekksTUFBTUcsZ0JBQWdCLE1BQU0zQixNQUFNMEI7UUFFbEMsSUFBSSxDQUFDQyxjQUFjMUIsRUFBRSxFQUFFLE9BQU87UUFFOUIsTUFBTTJCLFlBQVksTUFBTUQsY0FBY3ZCLElBQUk7UUFDMUMsTUFBTXlCLFFBQVFELFVBQVVFLGFBQWEsRUFBRUMsWUFBWSxDQUFDLEVBQUU7UUFFdEQsSUFBSSxDQUFDRixPQUFPLE9BQU87UUFFbkIsTUFBTWpELE9BQU9pRCxNQUFNRyxTQUFTLElBQUloQjtRQUVoQyxPQUFPO1lBQ0x4QyxVQUFVLEVBQUU7WUFDWnFDLFNBQVNnQixNQUFNSSxnQkFBZ0IsSUFBSTtZQUNuQ3JELE1BQU1BLEtBQUtRLE1BQU0sR0FBRyxLQUFLeUMsTUFBTUksZ0JBQWdCLEdBQUdyRDtZQUNsRHNELFlBQVk7Z0JBQ1ZDLE9BQU87Z0JBQ1BDLGVBQWU7Z0JBQ2ZDLGVBQWU7Z0JBQ2ZDLFNBQVM7WUFDWDtZQUNBQyxNQUFNO2dCQUFDO2dCQUFxQjtnQkFBWTthQUEwQjtZQUNsRUMsT0FBTztnQkFDTEMsV0FBVyxDQUFDLDhCQUE4QixFQUFFQyxtQkFBbUI5RCxNQUFNLENBQUM7Z0JBQ3RFK0QsU0FBUyxDQUFDLDBDQUEwQyxFQUFFbkIsSUFBSSxDQUFDO1lBQzdEO1FBQ0Y7SUFDRixFQUFFLE9BQU9uQixPQUFPO1FBQ2QsT0FBTztJQUNUO0FBQ0Y7QUFFQSxTQUFTTyx5QkFBeUJwQyxRQUE0QztJQUM1RSxNQUFNbUMsV0FBcUIsRUFBRTtJQUM3QixNQUFNaUMsVUFBVXBFLFNBQVNFLEdBQUcsQ0FBQ0MsQ0FBQUEsS0FBTUEsR0FBR2tFLE1BQU07SUFFNUMsSUFBSXJFLFNBQVNZLE1BQU0sS0FBSyxHQUFHO1FBQ3pCLE1BQU0sQ0FBQzBELElBQUlDLEdBQUcsR0FBR0g7UUFDakJqQyxTQUFTcUMsSUFBSSxDQUNYLENBQUMsRUFBRUYsR0FBRyxFQUFFQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUVBLEdBQUcsRUFBRUQsR0FBRyxDQUFDLEVBQzFCLENBQUMsRUFBRUEsR0FBRyxDQUFDLEVBQUVDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRUEsR0FBRyxDQUFDLEVBQUVELEdBQUcsQ0FBQyxFQUM1QixDQUFDLEVBQUVBLEdBQUcsRUFBRUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUVBLEdBQUcsRUFBRUQsR0FBRyxDQUFDLENBQUMsRUFDNUIsQ0FBQyxFQUFFQSxHQUFHLENBQUMsRUFBRUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUVBLEdBQUcsQ0FBQyxFQUFFRCxHQUFHLENBQUMsQ0FBQyxFQUM5QixDQUFDLEVBQUVBLEdBQUcsQ0FBQyxFQUFFQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRUEsR0FBRyxDQUFDLEVBQUVELEdBQUcsQ0FBQyxDQUFDLEVBQzlCLENBQUMsRUFBRUEsR0FBRyxDQUFDLEVBQUVDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRUEsR0FBRyxDQUFDLEVBQUVELEdBQUcsQ0FBQyxFQUM1QixDQUFDLEVBQUVBLEdBQUcsRUFBRUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUVBLEdBQUcsRUFBRUQsR0FBRyxDQUFDLENBQUMsRUFDNUIsQ0FBQyxFQUFFQSxHQUFHLENBQUMsRUFBRUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFQSxHQUFHLENBQUMsRUFBRUQsR0FBRyxDQUFDO0lBRWhDLE9BQU8sSUFBSXRFLFNBQVNZLE1BQU0sS0FBSyxHQUFHO1FBQ2hDLE1BQU0sQ0FBQzBELElBQUlDLElBQUlFLEdBQUcsR0FBR0w7UUFDckJqQyxTQUFTcUMsSUFBSSxDQUNYLENBQUMsRUFBRUYsR0FBRyxFQUFFQyxHQUFHLEVBQUVFLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRUgsR0FBRyxFQUFFRyxHQUFHLEVBQUVGLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRUEsR0FBRyxFQUFFRCxHQUFHLEVBQUVHLEdBQUcsQ0FBQyxFQUN2RCxDQUFDLEVBQUVGLEdBQUcsRUFBRUUsR0FBRyxFQUFFSCxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUVHLEdBQUcsRUFBRUgsR0FBRyxFQUFFQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUVFLEdBQUcsRUFBRUYsR0FBRyxFQUFFRCxHQUFHLENBQUMsRUFDdkQsQ0FBQyxFQUFFQSxHQUFHLENBQUMsRUFBRUMsR0FBRyxFQUFFRSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUVILEdBQUcsRUFBRUMsR0FBRyxDQUFDLEVBQUVFLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRUgsR0FBRyxFQUFFQyxHQUFHLEVBQUVFLEdBQUcsQ0FBQyxDQUFDLEVBQzFELENBQUMsRUFBRUgsR0FBRyxFQUFFQyxHQUFHLEVBQUVFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFSCxHQUFHLEVBQUVDLEdBQUcsQ0FBQyxFQUFFRSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUVILEdBQUcsQ0FBQyxFQUFFQyxHQUFHLEVBQUVFLEdBQUcsQ0FBQztJQUU5RCxPQUFPLElBQUl6RSxTQUFTWSxNQUFNLElBQUksR0FBRztRQUMvQiwwQ0FBMEM7UUFDMUN1QixTQUFTcUMsSUFBSSxDQUFDSixRQUFRMUQsSUFBSSxDQUFDO1FBQzNCeUIsU0FBU3FDLElBQUksQ0FBQ0osUUFBUXpELE9BQU8sR0FBR0QsSUFBSSxDQUFDO0lBQ3ZDO0lBRUEsT0FBT1EsTUFBTUMsSUFBSSxDQUFDLElBQUlYLElBQUkyQjtBQUM1QjtBQUVBLFNBQVNyQixnQkFBbUI0RCxHQUFRO0lBQ2xDLElBQUlBLElBQUk5RCxNQUFNLElBQUksR0FBRyxPQUFPO1FBQUM4RDtLQUFJO0lBQ2pDLE1BQU1DLFNBQWdCLEVBQUU7SUFDeEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLElBQUk5RCxNQUFNLEVBQUVnRSxJQUFLO1FBQ25DLE1BQU1DLE9BQU87ZUFBSUgsSUFBSUksS0FBSyxDQUFDLEdBQUdGO2VBQU9GLElBQUlJLEtBQUssQ0FBQ0YsSUFBSTtTQUFHO1FBQ3RELE1BQU1HLFFBQVFqRSxnQkFBZ0IrRDtRQUM5QixLQUFLLE1BQU03RCxRQUFRK0QsTUFBTztZQUN4QkosT0FBT0gsSUFBSSxDQUFDO2dCQUFDRSxHQUFHLENBQUNFLEVBQUU7bUJBQUs1RDthQUFLO1FBQy9CO0lBQ0Y7SUFDQSxPQUFPMkQ7QUFDVDtBQUVPLFNBQVNLLHVCQUF1QkMsV0FBbUI7SUFDeEQsT0FBTyxDQUFDLDhCQUE4QixFQUFFZixtQkFBbUJlLGFBQWEsQ0FBQztBQUMzRSIsInNvdXJjZXMiOlsid2VicGFjazovL2NoZW1jcmFmdC8uL3NyYy9saWIvY29tcG91bmRMb29rdXAudHM/YWNlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgQ29tcG91bmREYXRhIHtcclxuICBlbGVtZW50czogc3RyaW5nW107XHJcbiAgZm9ybXVsYTogc3RyaW5nO1xyXG4gIG5hbWU6IHN0cmluZztcclxuICBwcm9wZXJ0aWVzOiB7XHJcbiAgICBzdGF0ZTogc3RyaW5nO1xyXG4gICAgbWVsdGluZ19wb2ludDogc3RyaW5nO1xyXG4gICAgYm9pbGluZ19wb2ludDogc3RyaW5nO1xyXG4gICAgZGVuc2l0eTogc3RyaW5nO1xyXG4gIH07XHJcbiAgdXNlczogc3RyaW5nW107XHJcbiAgbGlua3M6IHtcclxuICAgIHdpa2lwZWRpYTogc3RyaW5nO1xyXG4gICAgcHViY2hlbTogc3RyaW5nO1xyXG4gIH07XHJcbn1cclxuXHJcbi8vIENhY2hlIGZvciBjb21wb3VuZHNcclxuY29uc3QgY29tcG91bmRDYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBDb21wb3VuZERhdGEgfCBudWxsPigpO1xyXG5sZXQgY29tcG91bmRzRGF0YWJhc2U6IFJlY29yZDxzdHJpbmcsIENvbXBvdW5kRGF0YT4gfCBudWxsID0gbnVsbDtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb29rdXBDb21wb3VuZChlbGVtZW50czogeyBzeW1ib2w6IHN0cmluZzsgbmFtZTogc3RyaW5nIH1bXSk6IFByb21pc2U8Q29tcG91bmREYXRhIHwgbnVsbD4ge1xyXG4gIC8vIE5vcm1hbGl6ZSBlbGVtZW50IG5hbWVzIGFuZCBjcmVhdGUgbG9va3VwIGtleXNcclxuICBjb25zdCBlbGVtZW50TmFtZXMgPSBlbGVtZW50cy5tYXAoZWwgPT4gZWwubmFtZSk7XHJcbiAgY29uc3Qgc29ydGVkTmFtZXMgPSBbLi4uZWxlbWVudE5hbWVzXS5zb3J0KCk7XHJcbiAgXHJcbiAgLy8gR2VuZXJhdGUgYWxsIHBvc3NpYmxlIHBlcm11dGF0aW9ucyBmb3IgbG9va3VwXHJcbiAgY29uc3QgbG9va3VwS2V5cyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xyXG4gIFxyXG4gIC8vIEFkZCBiYXNpYyBjb21iaW5hdGlvbnNcclxuICBsb29rdXBLZXlzLmFkZChlbGVtZW50TmFtZXMuam9pbignKycpKTtcclxuICBsb29rdXBLZXlzLmFkZChzb3J0ZWROYW1lcy5qb2luKCcrJykpO1xyXG4gIGxvb2t1cEtleXMuYWRkKGVsZW1lbnROYW1lcy5yZXZlcnNlKCkuam9pbignKycpKTtcclxuICBcclxuICAvLyBGb3IgMysgZWxlbWVudHMsIHRyeSBkaWZmZXJlbnQgZ3JvdXBpbmdzXHJcbiAgaWYgKGVsZW1lbnROYW1lcy5sZW5ndGggPj0gMykge1xyXG4gICAgY29uc3QgcGVybXV0YXRpb25zID0gZ2V0UGVybXV0YXRpb25zKGVsZW1lbnROYW1lcyk7XHJcbiAgICBwZXJtdXRhdGlvbnMuZm9yRWFjaChwZXJtID0+IGxvb2t1cEtleXMuYWRkKHBlcm0uam9pbignKycpKSk7XHJcbiAgfVxyXG4gIFxyXG4gIGNvbnN0IGxvb2t1cEtleXNBcnJheSA9IEFycmF5LmZyb20obG9va3VwS2V5cyk7XHJcbiAgXHJcbiAgLy8gTG9va2luZyB1cCBjb21wb3VuZCBmb3IgZWxlbWVudHNcclxuICBcclxuICAvLyBDaGVjayBjYWNoZSBmaXJzdCBmb3IgYW55IG9mIHRoZSBrZXlzXHJcbiAgZm9yIChjb25zdCBrZXkgb2YgbG9va3VwS2V5c0FycmF5KSB7XHJcbiAgICBpZiAoY29tcG91bmRDYWNoZS5oYXMoa2V5KSkge1xyXG4gICAgICAvLyBGb3VuZCBpbiBjYWNoZVxyXG4gICAgICByZXR1cm4gY29tcG91bmRDYWNoZS5nZXQoa2V5KSB8fCBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTG9hZCBjb21wb3VuZHMgZGF0YWJhc2UgaWYgbm90IGxvYWRlZFxyXG4gIGlmICghY29tcG91bmRzRGF0YWJhc2UpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9kYXRhL2NvbXBvdW5kcy5qc29uJyk7XHJcbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XHJcbiAgICAgIH1cclxuICAgICAgY29tcG91bmRzRGF0YWJhc2UgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIC8vIExvYWRlZCBjb21wb3VuZHMgZGF0YWJhc2Ugc3VjY2Vzc2Z1bGx5XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBjb21wb3VuZHMgZGF0YWJhc2U6JywgZXJyb3IpO1xyXG4gICAgICBjb21wb3VuZHNEYXRhYmFzZSA9IHt9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gQ2hlY2sgbG9jYWwgZGF0YWJhc2Ugd2l0aCBhbGwgcG9zc2libGUga2V5c1xyXG4gIGlmIChjb21wb3VuZHNEYXRhYmFzZSkge1xyXG4gICAgZm9yIChjb25zdCBrZXkgb2YgbG9va3VwS2V5c0FycmF5KSB7XHJcbiAgICAgIGNvbnN0IGxvY2FsQ29tcG91bmQgPSBjb21wb3VuZHNEYXRhYmFzZVtrZXldO1xyXG4gICAgICBpZiAobG9jYWxDb21wb3VuZCkge1xyXG4gICAgICAgIC8vIEZvdW5kIGluIGxvY2FsIGRhdGFiYXNlXHJcbiAgICAgICAgY29tcG91bmRDYWNoZS5zZXQoc29ydGVkTmFtZXMuam9pbignKycpLCBsb2NhbENvbXBvdW5kKTtcclxuICAgICAgICByZXR1cm4gbG9jYWxDb21wb3VuZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gTm90IGZvdW5kIGluIGxvY2FsIGRhdGFiYXNlLCBxdWVyeWluZyBQdWJDaGVtIEFQSVxyXG4gIFxyXG4gIC8vIFF1ZXJ5IFB1YkNoZW0gQVBJIGZvciBjb21wcmVoZW5zaXZlIGNvbXBvdW5kIGRhdGFiYXNlXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHB1YmNoZW1Db21wb3VuZCA9IGF3YWl0IHF1ZXJ5UHViQ2hlbUJ5RWxlbWVudHMoZWxlbWVudHMpO1xyXG4gICAgaWYgKHB1YmNoZW1Db21wb3VuZCkge1xyXG4gICAgICAvLyBGb3VuZCBjb21wb3VuZCB2aWEgUHViQ2hlbVxyXG4gICAgICBjb21wb3VuZENhY2hlLnNldChzb3J0ZWROYW1lcy5qb2luKCcrJyksIHB1YmNoZW1Db21wb3VuZCk7XHJcbiAgICAgIHJldHVybiBwdWJjaGVtQ29tcG91bmQ7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1B1YkNoZW0gcXVlcnkgZmFpbGVkOicsIGVycm9yKTtcclxuICB9XHJcbiAgXHJcbiAgLy8gQ2FjaGUgbmVnYXRpdmUgcmVzdWx0IHRvIGF2b2lkIHJlcGVhdGVkIEFQSSBjYWxsc1xyXG4gIGNvbXBvdW5kQ2FjaGUuc2V0KHNvcnRlZE5hbWVzLmpvaW4oJysnKSwgbnVsbCk7XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHF1ZXJ5UHViQ2hlbUJ5RWxlbWVudHMoZWxlbWVudHM6IHsgc3ltYm9sOiBzdHJpbmc7IG5hbWU6IHN0cmluZyB9W10pOiBQcm9taXNlPENvbXBvdW5kRGF0YSB8IG51bGw+IHtcclxuICB0cnkge1xyXG4gICAgLy8gR2VuZXJhdGUgcG9zc2libGUgbW9sZWN1bGFyIGZvcm11bGFzXHJcbiAgICBjb25zdCBmb3JtdWxhcyA9IGdlbmVyYXRlUG9zc2libGVGb3JtdWxhcyhlbGVtZW50cyk7XHJcbiAgICBcclxuICAgIC8vIFRyeSBlYWNoIGZvcm11bGEgd2l0aCBQdWJDaGVtXHJcbiAgICBmb3IgKGNvbnN0IGZvcm11bGEgb2YgZm9ybXVsYXMpIHtcclxuICAgICAgY29uc3QgY29tcG91bmQgPSBhd2FpdCBxdWVyeVB1YkNoZW1CeUZvcm11bGEoZm9ybXVsYSk7XHJcbiAgICAgIGlmIChjb21wb3VuZCkge1xyXG4gICAgICAgIHJldHVybiBjb21wb3VuZDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBUcnkgbmFtZS1iYXNlZCBzZWFyY2ggYXMgZmFsbGJhY2tcclxuICAgIGNvbnN0IG5hbWVRdWVyeSA9IGVsZW1lbnRzLm1hcChlbCA9PiBlbC5uYW1lLnRvTG93ZXJDYXNlKCkpLnNvcnQoKS5qb2luKCcgJyk7XHJcbiAgICBjb25zdCBuYW1lQ29tcG91bmQgPSBhd2FpdCBxdWVyeVB1YkNoZW1CeU5hbWUobmFtZVF1ZXJ5KTtcclxuICAgIGlmIChuYW1lQ29tcG91bmQpIHtcclxuICAgICAgcmV0dXJuIG5hbWVDb21wb3VuZDtcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gcXVlcnlQdWJDaGVtQnlGb3JtdWxhKGZvcm11bGE6IHN0cmluZyk6IFByb21pc2U8Q29tcG91bmREYXRhIHwgbnVsbD4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBzZWFyY2hVcmwgPSBgaHR0cHM6Ly9wdWJjaGVtLm5jYmkubmxtLm5paC5nb3YvcmVzdC9wdWcvY29tcG91bmQvZm9ybXVsYS8ke2Zvcm11bGF9L0pTT05gO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChzZWFyY2hVcmwpO1xyXG4gICAgXHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSByZXR1cm4gbnVsbDtcclxuICAgIFxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIGNvbnN0IGNvbXBvdW5kcyA9IGRhdGEuUENfQ29tcG91bmRzO1xyXG4gICAgXHJcbiAgICBpZiAoIWNvbXBvdW5kcyB8fCBjb21wb3VuZHMubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcclxuICAgIFxyXG4gICAgLy8gR2V0IHRoZSBmaXJzdCBjb21wb3VuZFxyXG4gICAgY29uc3QgY29tcG91bmQgPSBjb21wb3VuZHNbMF07XHJcbiAgICBjb25zdCBjaWQgPSBjb21wb3VuZC5pZD8uaWQ/LmNpZDtcclxuICAgIFxyXG4gICAgaWYgKCFjaWQpIHJldHVybiBudWxsO1xyXG5cclxuICAgIC8vIEdldCBkZXRhaWxlZCBwcm9wZXJ0aWVzXHJcbiAgICBjb25zdCBwcm9wc1VybCA9IGBodHRwczovL3B1YmNoZW0ubmNiaS5ubG0ubmloLmdvdi9yZXN0L3B1Zy9jb21wb3VuZC9jaWQvJHtjaWR9L3Byb3BlcnR5L01vbGVjdWxhckZvcm11bGEsSVVQQUNOYW1lLE1vbGVjdWxhcldlaWdodCxDYW5vbmljYWxTTUlMRVMvSlNPTmA7XHJcbiAgICBjb25zdCBwcm9wc1Jlc3BvbnNlID0gYXdhaXQgZmV0Y2gocHJvcHNVcmwpO1xyXG4gICAgXHJcbiAgICBpZiAoIXByb3BzUmVzcG9uc2Uub2spIHJldHVybiBudWxsO1xyXG4gICAgXHJcbiAgICBjb25zdCBwcm9wc0RhdGEgPSBhd2FpdCBwcm9wc1Jlc3BvbnNlLmpzb24oKTtcclxuICAgIGNvbnN0IHByb3BzID0gcHJvcHNEYXRhLlByb3BlcnR5VGFibGU/LlByb3BlcnRpZXM/LlswXTtcclxuICAgIFxyXG4gICAgaWYgKCFwcm9wcykgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgY29uc3QgbmFtZSA9IHByb3BzLklVUEFDTmFtZSB8fCBwcm9wcy5Nb2xlY3VsYXJGb3JtdWxhIHx8ICdVbmtub3duIGNvbXBvdW5kJztcclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZWxlbWVudHM6IFtdLFxyXG4gICAgICBmb3JtdWxhOiBwcm9wcy5Nb2xlY3VsYXJGb3JtdWxhIHx8IGZvcm11bGEsXHJcbiAgICAgIG5hbWU6IG5hbWUubGVuZ3RoID4gNTAgPyBwcm9wcy5Nb2xlY3VsYXJGb3JtdWxhIDogbmFtZSxcclxuICAgICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIHN0YXRlOiAnVW5rbm93bicsXHJcbiAgICAgICAgbWVsdGluZ19wb2ludDogJ1Vua25vd24nLFxyXG4gICAgICAgIGJvaWxpbmdfcG9pbnQ6ICdVbmtub3duJyxcclxuICAgICAgICBkZW5zaXR5OiAnVW5rbm93bidcclxuICAgICAgfSxcclxuICAgICAgdXNlczogWydDaGVtaWNhbCBjb21wb3VuZCcsICdSZXNlYXJjaCcsICdJbmR1c3RyaWFsIGFwcGxpY2F0aW9ucyddLFxyXG4gICAgICBsaW5rczoge1xyXG4gICAgICAgIHdpa2lwZWRpYTogYGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpLyR7ZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpfWAsXHJcbiAgICAgICAgcHViY2hlbTogYGh0dHBzOi8vcHViY2hlbS5uY2JpLm5sbS5uaWguZ292L2NvbXBvdW5kLyR7Y2lkfWBcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5hc3luYyBmdW5jdGlvbiBxdWVyeVB1YkNoZW1CeU5hbWUobmFtZVF1ZXJ5OiBzdHJpbmcpOiBQcm9taXNlPENvbXBvdW5kRGF0YSB8IG51bGw+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3Qgc2VhcmNoVXJsID0gYGh0dHBzOi8vcHViY2hlbS5uY2JpLm5sbS5uaWguZ292L3Jlc3QvcHVnL2NvbXBvdW5kL25hbWUvJHtlbmNvZGVVUklDb21wb25lbnQobmFtZVF1ZXJ5KX0vSlNPTmA7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHNlYXJjaFVybCk7XHJcbiAgICBcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHJldHVybiBudWxsO1xyXG4gICAgXHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgY29uc3QgY29tcG91bmRzID0gZGF0YS5QQ19Db21wb3VuZHM7XHJcbiAgICBcclxuICAgIGlmICghY29tcG91bmRzIHx8IGNvbXBvdW5kcy5sZW5ndGggPT09IDApIHJldHVybiBudWxsO1xyXG4gICAgXHJcbiAgICBjb25zdCBjb21wb3VuZCA9IGNvbXBvdW5kc1swXTtcclxuICAgIGNvbnN0IGNpZCA9IGNvbXBvdW5kLmlkPy5pZD8uY2lkO1xyXG4gICAgXHJcbiAgICBpZiAoIWNpZCkgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgY29uc3QgcHJvcHNVcmwgPSBgaHR0cHM6Ly9wdWJjaGVtLm5jYmkubmxtLm5paC5nb3YvcmVzdC9wdWcvY29tcG91bmQvY2lkLyR7Y2lkfS9wcm9wZXJ0eS9Nb2xlY3VsYXJGb3JtdWxhLElVUEFDTmFtZSxNb2xlY3VsYXJXZWlnaHQvSlNPTmA7XHJcbiAgICBjb25zdCBwcm9wc1Jlc3BvbnNlID0gYXdhaXQgZmV0Y2gocHJvcHNVcmwpO1xyXG4gICAgXHJcbiAgICBpZiAoIXByb3BzUmVzcG9uc2Uub2spIHJldHVybiBudWxsO1xyXG4gICAgXHJcbiAgICBjb25zdCBwcm9wc0RhdGEgPSBhd2FpdCBwcm9wc1Jlc3BvbnNlLmpzb24oKTtcclxuICAgIGNvbnN0IHByb3BzID0gcHJvcHNEYXRhLlByb3BlcnR5VGFibGU/LlByb3BlcnRpZXM/LlswXTtcclxuICAgIFxyXG4gICAgaWYgKCFwcm9wcykgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgY29uc3QgbmFtZSA9IHByb3BzLklVUEFDTmFtZSB8fCBuYW1lUXVlcnk7XHJcbiAgICBcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGVsZW1lbnRzOiBbXSxcclxuICAgICAgZm9ybXVsYTogcHJvcHMuTW9sZWN1bGFyRm9ybXVsYSB8fCAnVW5rbm93bicsXHJcbiAgICAgIG5hbWU6IG5hbWUubGVuZ3RoID4gNTAgPyBwcm9wcy5Nb2xlY3VsYXJGb3JtdWxhIDogbmFtZSxcclxuICAgICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIHN0YXRlOiAnVW5rbm93bicsXHJcbiAgICAgICAgbWVsdGluZ19wb2ludDogJ1Vua25vd24nLFxyXG4gICAgICAgIGJvaWxpbmdfcG9pbnQ6ICdVbmtub3duJyxcclxuICAgICAgICBkZW5zaXR5OiAnVW5rbm93bidcclxuICAgICAgfSxcclxuICAgICAgdXNlczogWydDaGVtaWNhbCBjb21wb3VuZCcsICdSZXNlYXJjaCcsICdJbmR1c3RyaWFsIGFwcGxpY2F0aW9ucyddLFxyXG4gICAgICBsaW5rczoge1xyXG4gICAgICAgIHdpa2lwZWRpYTogYGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpLyR7ZW5jb2RlVVJJQ29tcG9uZW50KG5hbWUpfWAsXHJcbiAgICAgICAgcHViY2hlbTogYGh0dHBzOi8vcHViY2hlbS5uY2JpLm5sbS5uaWguZ292L2NvbXBvdW5kLyR7Y2lkfWBcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZVBvc3NpYmxlRm9ybXVsYXMoZWxlbWVudHM6IHsgc3ltYm9sOiBzdHJpbmc7IG5hbWU6IHN0cmluZyB9W10pOiBzdHJpbmdbXSB7XHJcbiAgY29uc3QgZm9ybXVsYXM6IHN0cmluZ1tdID0gW107XHJcbiAgY29uc3Qgc3ltYm9scyA9IGVsZW1lbnRzLm1hcChlbCA9PiBlbC5zeW1ib2wpO1xyXG4gIFxyXG4gIGlmIChlbGVtZW50cy5sZW5ndGggPT09IDIpIHtcclxuICAgIGNvbnN0IFtzMSwgczJdID0gc3ltYm9scztcclxuICAgIGZvcm11bGFzLnB1c2goXHJcbiAgICAgIGAke3MxfSR7czJ9YCwgYCR7czJ9JHtzMX1gLFxyXG4gICAgICBgJHtzMX0yJHtzMn1gLCBgJHtzMn0yJHtzMX1gLFxyXG4gICAgICBgJHtzMX0ke3MyfTJgLCBgJHtzMn0ke3MxfTJgLFxyXG4gICAgICBgJHtzMX0yJHtzMn0zYCwgYCR7czJ9MiR7czF9M2AsXHJcbiAgICAgIGAke3MxfTMke3MyfTJgLCBgJHtzMn0zJHtzMX0yYCxcclxuICAgICAgYCR7czF9MyR7czJ9YCwgYCR7czJ9MyR7czF9YCxcclxuICAgICAgYCR7czF9JHtzMn0zYCwgYCR7czJ9JHtzMX0zYCxcclxuICAgICAgYCR7czF9NCR7czJ9YCwgYCR7czJ9NCR7czF9YFxyXG4gICAgKTtcclxuICB9IGVsc2UgaWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gMykge1xyXG4gICAgY29uc3QgW3MxLCBzMiwgczNdID0gc3ltYm9scztcclxuICAgIGZvcm11bGFzLnB1c2goXHJcbiAgICAgIGAke3MxfSR7czJ9JHtzM31gLCBgJHtzMX0ke3MzfSR7czJ9YCwgYCR7czJ9JHtzMX0ke3MzfWAsXHJcbiAgICAgIGAke3MyfSR7czN9JHtzMX1gLCBgJHtzM30ke3MxfSR7czJ9YCwgYCR7czN9JHtzMn0ke3MxfWAsXHJcbiAgICAgIGAke3MxfTIke3MyfSR7czN9YCwgYCR7czF9JHtzMn0yJHtzM31gLCBgJHtzMX0ke3MyfSR7czN9MmAsXHJcbiAgICAgIGAke3MxfSR7czJ9JHtzM30zYCwgYCR7czF9JHtzMn0zJHtzM31gLCBgJHtzMX0zJHtzMn0ke3MzfWBcclxuICAgICk7XHJcbiAgfSBlbHNlIGlmIChlbGVtZW50cy5sZW5ndGggPj0gNCkge1xyXG4gICAgLy8gRm9yIDQrIGVsZW1lbnRzLCB0cnkgYmFzaWMgY29tYmluYXRpb25zXHJcbiAgICBmb3JtdWxhcy5wdXNoKHN5bWJvbHMuam9pbignJykpO1xyXG4gICAgZm9ybXVsYXMucHVzaChzeW1ib2xzLnJldmVyc2UoKS5qb2luKCcnKSk7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQoZm9ybXVsYXMpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UGVybXV0YXRpb25zPFQ+KGFycjogVFtdKTogVFtdW10ge1xyXG4gIGlmIChhcnIubGVuZ3RoIDw9IDEpIHJldHVybiBbYXJyXTtcclxuICBjb25zdCByZXN1bHQ6IFRbXVtdID0gW107XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcclxuICAgIGNvbnN0IHJlc3QgPSBbLi4uYXJyLnNsaWNlKDAsIGkpLCAuLi5hcnIuc2xpY2UoaSArIDEpXTtcclxuICAgIGNvbnN0IHBlcm1zID0gZ2V0UGVybXV0YXRpb25zKHJlc3QpO1xyXG4gICAgZm9yIChjb25zdCBwZXJtIG9mIHBlcm1zKSB7XHJcbiAgICAgIHJlc3VsdC5wdXNoKFthcnJbaV0sIC4uLnBlcm1dKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRXaWtpcGVkaWFVcmwoZWxlbWVudE5hbWU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIGBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS8ke2VuY29kZVVSSUNvbXBvbmVudChlbGVtZW50TmFtZSl9YDtcclxufSJdLCJuYW1lcyI6WyJjb21wb3VuZENhY2hlIiwiTWFwIiwiY29tcG91bmRzRGF0YWJhc2UiLCJsb29rdXBDb21wb3VuZCIsImVsZW1lbnRzIiwiZWxlbWVudE5hbWVzIiwibWFwIiwiZWwiLCJuYW1lIiwic29ydGVkTmFtZXMiLCJzb3J0IiwibG9va3VwS2V5cyIsIlNldCIsImFkZCIsImpvaW4iLCJyZXZlcnNlIiwibGVuZ3RoIiwicGVybXV0YXRpb25zIiwiZ2V0UGVybXV0YXRpb25zIiwiZm9yRWFjaCIsInBlcm0iLCJsb29rdXBLZXlzQXJyYXkiLCJBcnJheSIsImZyb20iLCJrZXkiLCJoYXMiLCJnZXQiLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJFcnJvciIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsImNvbnNvbGUiLCJsb2NhbENvbXBvdW5kIiwic2V0IiwicHViY2hlbUNvbXBvdW5kIiwicXVlcnlQdWJDaGVtQnlFbGVtZW50cyIsImZvcm11bGFzIiwiZ2VuZXJhdGVQb3NzaWJsZUZvcm11bGFzIiwiZm9ybXVsYSIsImNvbXBvdW5kIiwicXVlcnlQdWJDaGVtQnlGb3JtdWxhIiwibmFtZVF1ZXJ5IiwidG9Mb3dlckNhc2UiLCJuYW1lQ29tcG91bmQiLCJxdWVyeVB1YkNoZW1CeU5hbWUiLCJzZWFyY2hVcmwiLCJkYXRhIiwiY29tcG91bmRzIiwiUENfQ29tcG91bmRzIiwiY2lkIiwiaWQiLCJwcm9wc1VybCIsInByb3BzUmVzcG9uc2UiLCJwcm9wc0RhdGEiLCJwcm9wcyIsIlByb3BlcnR5VGFibGUiLCJQcm9wZXJ0aWVzIiwiSVVQQUNOYW1lIiwiTW9sZWN1bGFyRm9ybXVsYSIsInByb3BlcnRpZXMiLCJzdGF0ZSIsIm1lbHRpbmdfcG9pbnQiLCJib2lsaW5nX3BvaW50IiwiZGVuc2l0eSIsInVzZXMiLCJsaW5rcyIsIndpa2lwZWRpYSIsImVuY29kZVVSSUNvbXBvbmVudCIsInB1YmNoZW0iLCJzeW1ib2xzIiwic3ltYm9sIiwiczEiLCJzMiIsInB1c2giLCJzMyIsImFyciIsInJlc3VsdCIsImkiLCJyZXN0Iiwic2xpY2UiLCJwZXJtcyIsImdldEVsZW1lbnRXaWtpcGVkaWFVcmwiLCJlbGVtZW50TmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/compoundLookup.ts\n");

/***/ })

};
;