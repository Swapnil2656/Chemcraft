{"kind":"FETCH","data":{"headers":{"accept-ranges":"bytes","cache-control":"public, max-age=0","connection":"keep-alive","content-encoding":"gzip","content-type":"application/json; charset=UTF-8","date":"Sat, 25 Oct 2025 16:08:50 GMT","etag":"W/\"aa88-19a1b8cd0f4\"","keep-alive":"timeout=5","last-modified":"Sat, 25 Oct 2025 13:26:44 GMT","transfer-encoding":"chunked","vary":"Accept-Encoding","x-clerk-auth-reason":"dev-browser-missing","x-clerk-auth-status":"signed-out","x-middleware-rewrite":"/data/chemcraft-complete-database-550.json"},"body":"","status":200,"url":"http://localhost:3000/data/chemcraft-complete-database-550.json"},"revalidate":31536000,"tags":[]}